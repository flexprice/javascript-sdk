/**
 * FlexPrice API
 * FlexPrice API Service
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MeterAggregation from './MeterAggregation';
import MeterFilter from './MeterFilter';
import TypesResetUsage from './TypesResetUsage';

/**
 * The DtoCreateMeterRequest model module.
 * @module model/DtoCreateMeterRequest
 * @version 1.0
 */
class DtoCreateMeterRequest {
    /**
     * Constructs a new <code>DtoCreateMeterRequest</code>.
     * @alias module:model/DtoCreateMeterRequest
     * @param aggregation {module:model/MeterAggregation} 
     * @param eventName {String} 
     * @param name {String} 
     * @param resetUsage {module:model/TypesResetUsage} 
     */
    constructor(aggregation, eventName, name, resetUsage) { 
        
        DtoCreateMeterRequest.initialize(this, aggregation, eventName, name, resetUsage);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, aggregation, eventName, name, resetUsage) { 
        obj['aggregation'] = aggregation;
        obj['event_name'] = eventName;
        obj['name'] = name;
        obj['reset_usage'] = resetUsage;
    }

    /**
     * Constructs a <code>DtoCreateMeterRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DtoCreateMeterRequest} obj Optional instance to populate.
     * @return {module:model/DtoCreateMeterRequest} The populated <code>DtoCreateMeterRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DtoCreateMeterRequest();

            if (data.hasOwnProperty('aggregation')) {
                obj['aggregation'] = MeterAggregation.constructFromObject(data['aggregation']);
            }
            if (data.hasOwnProperty('event_name')) {
                obj['event_name'] = ApiClient.convertToType(data['event_name'], 'String');
            }
            if (data.hasOwnProperty('filters')) {
                obj['filters'] = ApiClient.convertToType(data['filters'], [MeterFilter]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('reset_usage')) {
                obj['reset_usage'] = TypesResetUsage.constructFromObject(data['reset_usage']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DtoCreateMeterRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DtoCreateMeterRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DtoCreateMeterRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `aggregation`
        if (data['aggregation']) { // data not null
          MeterAggregation.validateJSON(data['aggregation']);
        }
        // ensure the json data is a string
        if (data['event_name'] && !(typeof data['event_name'] === 'string' || data['event_name'] instanceof String)) {
            throw new Error("Expected the field `event_name` to be a primitive type in the JSON string but got " + data['event_name']);
        }
        if (data['filters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['filters'])) {
                throw new Error("Expected the field `filters` to be an array in the JSON data but got " + data['filters']);
            }
            // validate the optional field `filters` (array)
            for (const item of data['filters']) {
                MeterFilter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

DtoCreateMeterRequest.RequiredProperties = ["aggregation", "event_name", "name", "reset_usage"];

/**
 * @member {module:model/MeterAggregation} aggregation
 */
DtoCreateMeterRequest.prototype['aggregation'] = undefined;

/**
 * @member {String} event_name
 */
DtoCreateMeterRequest.prototype['event_name'] = undefined;

/**
 * @member {Array.<module:model/MeterFilter>} filters
 */
DtoCreateMeterRequest.prototype['filters'] = undefined;

/**
 * @member {String} name
 */
DtoCreateMeterRequest.prototype['name'] = undefined;

/**
 * @member {module:model/TypesResetUsage} reset_usage
 */
DtoCreateMeterRequest.prototype['reset_usage'] = undefined;






export default DtoCreateMeterRequest;

