/**
 * FlexPrice API
 * FlexPrice API Service
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MeterAggregation from './MeterAggregation';
import MeterFilter from './MeterFilter';
import TypesResetUsage from './TypesResetUsage';

/**
 * The DtoMeterResponse model module.
 * @module model/DtoMeterResponse
 * @version 1.0
 */
class DtoMeterResponse {
    /**
     * Constructs a new <code>DtoMeterResponse</code>.
     * @alias module:model/DtoMeterResponse
     */
    constructor() { 
        
        DtoMeterResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DtoMeterResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DtoMeterResponse} obj Optional instance to populate.
     * @return {module:model/DtoMeterResponse} The populated <code>DtoMeterResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DtoMeterResponse();

            if (data.hasOwnProperty('aggregation')) {
                obj['aggregation'] = MeterAggregation.constructFromObject(data['aggregation']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('event_name')) {
                obj['event_name'] = ApiClient.convertToType(data['event_name'], 'String');
            }
            if (data.hasOwnProperty('filters')) {
                obj['filters'] = ApiClient.convertToType(data['filters'], [MeterFilter]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('reset_usage')) {
                obj['reset_usage'] = TypesResetUsage.constructFromObject(data['reset_usage']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('tenant_id')) {
                obj['tenant_id'] = ApiClient.convertToType(data['tenant_id'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DtoMeterResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DtoMeterResponse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `aggregation`
        if (data['aggregation']) { // data not null
          MeterAggregation.validateJSON(data['aggregation']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['event_name'] && !(typeof data['event_name'] === 'string' || data['event_name'] instanceof String)) {
            throw new Error("Expected the field `event_name` to be a primitive type in the JSON string but got " + data['event_name']);
        }
        if (data['filters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['filters'])) {
                throw new Error("Expected the field `filters` to be an array in the JSON data but got " + data['filters']);
            }
            // validate the optional field `filters` (array)
            for (const item of data['filters']) {
                MeterFilter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['tenant_id'] && !(typeof data['tenant_id'] === 'string' || data['tenant_id'] instanceof String)) {
            throw new Error("Expected the field `tenant_id` to be a primitive type in the JSON string but got " + data['tenant_id']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}



/**
 * @member {module:model/MeterAggregation} aggregation
 */
DtoMeterResponse.prototype['aggregation'] = undefined;

/**
 * @member {String} created_at
 */
DtoMeterResponse.prototype['created_at'] = undefined;

/**
 * @member {String} event_name
 */
DtoMeterResponse.prototype['event_name'] = undefined;

/**
 * @member {Array.<module:model/MeterFilter>} filters
 */
DtoMeterResponse.prototype['filters'] = undefined;

/**
 * @member {String} id
 */
DtoMeterResponse.prototype['id'] = undefined;

/**
 * @member {String} name
 */
DtoMeterResponse.prototype['name'] = undefined;

/**
 * @member {module:model/TypesResetUsage} reset_usage
 */
DtoMeterResponse.prototype['reset_usage'] = undefined;

/**
 * @member {String} status
 */
DtoMeterResponse.prototype['status'] = undefined;

/**
 * @member {String} tenant_id
 */
DtoMeterResponse.prototype['tenant_id'] = undefined;

/**
 * @member {String} updated_at
 */
DtoMeterResponse.prototype['updated_at'] = undefined;






export default DtoMeterResponse;

