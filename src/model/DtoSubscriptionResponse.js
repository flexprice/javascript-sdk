/**
 * FlexPrice API
 * FlexPrice API Service
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DtoCustomerResponse from './DtoCustomerResponse';
import DtoPlanResponse from './DtoPlanResponse';
import SubscriptionSubscriptionLineItem from './SubscriptionSubscriptionLineItem';
import SubscriptionSubscriptionPause from './SubscriptionSubscriptionPause';
import TypesBillingCadence from './TypesBillingCadence';
import TypesBillingPeriod from './TypesBillingPeriod';
import TypesPauseStatus from './TypesPauseStatus';
import TypesStatus from './TypesStatus';
import TypesSubscriptionStatus from './TypesSubscriptionStatus';

/**
 * The DtoSubscriptionResponse model module.
 * @module model/DtoSubscriptionResponse
 * @version 1.0
 */
class DtoSubscriptionResponse {
    /**
     * Constructs a new <code>DtoSubscriptionResponse</code>.
     * @alias module:model/DtoSubscriptionResponse
     */
    constructor() { 
        
        DtoSubscriptionResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DtoSubscriptionResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DtoSubscriptionResponse} obj Optional instance to populate.
     * @return {module:model/DtoSubscriptionResponse} The populated <code>DtoSubscriptionResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DtoSubscriptionResponse();

            if (data.hasOwnProperty('active_pause_id')) {
                obj['active_pause_id'] = ApiClient.convertToType(data['active_pause_id'], 'String');
            }
            if (data.hasOwnProperty('billing_anchor')) {
                obj['billing_anchor'] = ApiClient.convertToType(data['billing_anchor'], 'String');
            }
            if (data.hasOwnProperty('billing_cadence')) {
                obj['billing_cadence'] = TypesBillingCadence.constructFromObject(data['billing_cadence']);
            }
            if (data.hasOwnProperty('billing_period')) {
                obj['billing_period'] = TypesBillingPeriod.constructFromObject(data['billing_period']);
            }
            if (data.hasOwnProperty('billing_period_count')) {
                obj['billing_period_count'] = ApiClient.convertToType(data['billing_period_count'], 'Number');
            }
            if (data.hasOwnProperty('cancel_at')) {
                obj['cancel_at'] = ApiClient.convertToType(data['cancel_at'], 'String');
            }
            if (data.hasOwnProperty('cancel_at_period_end')) {
                obj['cancel_at_period_end'] = ApiClient.convertToType(data['cancel_at_period_end'], 'Boolean');
            }
            if (data.hasOwnProperty('cancelled_at')) {
                obj['cancelled_at'] = ApiClient.convertToType(data['cancelled_at'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('created_by')) {
                obj['created_by'] = ApiClient.convertToType(data['created_by'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('current_period_end')) {
                obj['current_period_end'] = ApiClient.convertToType(data['current_period_end'], 'String');
            }
            if (data.hasOwnProperty('current_period_start')) {
                obj['current_period_start'] = ApiClient.convertToType(data['current_period_start'], 'String');
            }
            if (data.hasOwnProperty('customer')) {
                obj['customer'] = DtoCustomerResponse.constructFromObject(data['customer']);
            }
            if (data.hasOwnProperty('customer_id')) {
                obj['customer_id'] = ApiClient.convertToType(data['customer_id'], 'String');
            }
            if (data.hasOwnProperty('end_date')) {
                obj['end_date'] = ApiClient.convertToType(data['end_date'], 'String');
            }
            if (data.hasOwnProperty('environment_id')) {
                obj['environment_id'] = ApiClient.convertToType(data['environment_id'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('line_items')) {
                obj['line_items'] = ApiClient.convertToType(data['line_items'], [SubscriptionSubscriptionLineItem]);
            }
            if (data.hasOwnProperty('lookup_key')) {
                obj['lookup_key'] = ApiClient.convertToType(data['lookup_key'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
            if (data.hasOwnProperty('pause_status')) {
                obj['pause_status'] = TypesPauseStatus.constructFromObject(data['pause_status']);
            }
            if (data.hasOwnProperty('pauses')) {
                obj['pauses'] = ApiClient.convertToType(data['pauses'], [SubscriptionSubscriptionPause]);
            }
            if (data.hasOwnProperty('plan')) {
                obj['plan'] = DtoPlanResponse.constructFromObject(data['plan']);
            }
            if (data.hasOwnProperty('plan_id')) {
                obj['plan_id'] = ApiClient.convertToType(data['plan_id'], 'String');
            }
            if (data.hasOwnProperty('start_date')) {
                obj['start_date'] = ApiClient.convertToType(data['start_date'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = TypesStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('subscription_status')) {
                obj['subscription_status'] = TypesSubscriptionStatus.constructFromObject(data['subscription_status']);
            }
            if (data.hasOwnProperty('tenant_id')) {
                obj['tenant_id'] = ApiClient.convertToType(data['tenant_id'], 'String');
            }
            if (data.hasOwnProperty('trial_end')) {
                obj['trial_end'] = ApiClient.convertToType(data['trial_end'], 'String');
            }
            if (data.hasOwnProperty('trial_start')) {
                obj['trial_start'] = ApiClient.convertToType(data['trial_start'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('updated_by')) {
                obj['updated_by'] = ApiClient.convertToType(data['updated_by'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DtoSubscriptionResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DtoSubscriptionResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['active_pause_id'] && !(typeof data['active_pause_id'] === 'string' || data['active_pause_id'] instanceof String)) {
            throw new Error("Expected the field `active_pause_id` to be a primitive type in the JSON string but got " + data['active_pause_id']);
        }
        // ensure the json data is a string
        if (data['billing_anchor'] && !(typeof data['billing_anchor'] === 'string' || data['billing_anchor'] instanceof String)) {
            throw new Error("Expected the field `billing_anchor` to be a primitive type in the JSON string but got " + data['billing_anchor']);
        }
        // ensure the json data is a string
        if (data['cancel_at'] && !(typeof data['cancel_at'] === 'string' || data['cancel_at'] instanceof String)) {
            throw new Error("Expected the field `cancel_at` to be a primitive type in the JSON string but got " + data['cancel_at']);
        }
        // ensure the json data is a string
        if (data['cancelled_at'] && !(typeof data['cancelled_at'] === 'string' || data['cancelled_at'] instanceof String)) {
            throw new Error("Expected the field `cancelled_at` to be a primitive type in the JSON string but got " + data['cancelled_at']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['created_by'] && !(typeof data['created_by'] === 'string' || data['created_by'] instanceof String)) {
            throw new Error("Expected the field `created_by` to be a primitive type in the JSON string but got " + data['created_by']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['current_period_end'] && !(typeof data['current_period_end'] === 'string' || data['current_period_end'] instanceof String)) {
            throw new Error("Expected the field `current_period_end` to be a primitive type in the JSON string but got " + data['current_period_end']);
        }
        // ensure the json data is a string
        if (data['current_period_start'] && !(typeof data['current_period_start'] === 'string' || data['current_period_start'] instanceof String)) {
            throw new Error("Expected the field `current_period_start` to be a primitive type in the JSON string but got " + data['current_period_start']);
        }
        // validate the optional field `customer`
        if (data['customer']) { // data not null
          DtoCustomerResponse.validateJSON(data['customer']);
        }
        // ensure the json data is a string
        if (data['customer_id'] && !(typeof data['customer_id'] === 'string' || data['customer_id'] instanceof String)) {
            throw new Error("Expected the field `customer_id` to be a primitive type in the JSON string but got " + data['customer_id']);
        }
        // ensure the json data is a string
        if (data['end_date'] && !(typeof data['end_date'] === 'string' || data['end_date'] instanceof String)) {
            throw new Error("Expected the field `end_date` to be a primitive type in the JSON string but got " + data['end_date']);
        }
        // ensure the json data is a string
        if (data['environment_id'] && !(typeof data['environment_id'] === 'string' || data['environment_id'] instanceof String)) {
            throw new Error("Expected the field `environment_id` to be a primitive type in the JSON string but got " + data['environment_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['line_items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['line_items'])) {
                throw new Error("Expected the field `line_items` to be an array in the JSON data but got " + data['line_items']);
            }
            // validate the optional field `line_items` (array)
            for (const item of data['line_items']) {
                SubscriptionSubscriptionLineItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['lookup_key'] && !(typeof data['lookup_key'] === 'string' || data['lookup_key'] instanceof String)) {
            throw new Error("Expected the field `lookup_key` to be a primitive type in the JSON string but got " + data['lookup_key']);
        }
        if (data['pauses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pauses'])) {
                throw new Error("Expected the field `pauses` to be an array in the JSON data but got " + data['pauses']);
            }
            // validate the optional field `pauses` (array)
            for (const item of data['pauses']) {
                SubscriptionSubscriptionPause.validateJSON(item);
            };
        }
        // validate the optional field `plan`
        if (data['plan']) { // data not null
          DtoPlanResponse.validateJSON(data['plan']);
        }
        // ensure the json data is a string
        if (data['plan_id'] && !(typeof data['plan_id'] === 'string' || data['plan_id'] instanceof String)) {
            throw new Error("Expected the field `plan_id` to be a primitive type in the JSON string but got " + data['plan_id']);
        }
        // ensure the json data is a string
        if (data['start_date'] && !(typeof data['start_date'] === 'string' || data['start_date'] instanceof String)) {
            throw new Error("Expected the field `start_date` to be a primitive type in the JSON string but got " + data['start_date']);
        }
        // ensure the json data is a string
        if (data['tenant_id'] && !(typeof data['tenant_id'] === 'string' || data['tenant_id'] instanceof String)) {
            throw new Error("Expected the field `tenant_id` to be a primitive type in the JSON string but got " + data['tenant_id']);
        }
        // ensure the json data is a string
        if (data['trial_end'] && !(typeof data['trial_end'] === 'string' || data['trial_end'] instanceof String)) {
            throw new Error("Expected the field `trial_end` to be a primitive type in the JSON string but got " + data['trial_end']);
        }
        // ensure the json data is a string
        if (data['trial_start'] && !(typeof data['trial_start'] === 'string' || data['trial_start'] instanceof String)) {
            throw new Error("Expected the field `trial_start` to be a primitive type in the JSON string but got " + data['trial_start']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }
        // ensure the json data is a string
        if (data['updated_by'] && !(typeof data['updated_by'] === 'string' || data['updated_by'] instanceof String)) {
            throw new Error("Expected the field `updated_by` to be a primitive type in the JSON string but got " + data['updated_by']);
        }

        return true;
    }


}



/**
 * ActivePauseID references the current active pause configuration This will be null if no pause is active or scheduled
 * @member {String} active_pause_id
 */
DtoSubscriptionResponse.prototype['active_pause_id'] = undefined;

/**
 * BillingAnchor is the reference point that aligns future billing cycle dates. It sets the day of week for week intervals, the day of month for month and year intervals, and the month of year for year intervals. The timestamp is in UTC format.
 * @member {String} billing_anchor
 */
DtoSubscriptionResponse.prototype['billing_anchor'] = undefined;

/**
 * @member {module:model/TypesBillingCadence} billing_cadence
 */
DtoSubscriptionResponse.prototype['billing_cadence'] = undefined;

/**
 * @member {module:model/TypesBillingPeriod} billing_period
 */
DtoSubscriptionResponse.prototype['billing_period'] = undefined;

/**
 * BillingPeriodCount is the total number units of the billing period.
 * @member {Number} billing_period_count
 */
DtoSubscriptionResponse.prototype['billing_period_count'] = undefined;

/**
 * CancelAt is the date the subscription will be canceled
 * @member {String} cancel_at
 */
DtoSubscriptionResponse.prototype['cancel_at'] = undefined;

/**
 * CancelAtPeriodEnd is whether the subscription was canceled at the end of the current period
 * @member {Boolean} cancel_at_period_end
 */
DtoSubscriptionResponse.prototype['cancel_at_period_end'] = undefined;

/**
 * CanceledAt is the date the subscription was canceled
 * @member {String} cancelled_at
 */
DtoSubscriptionResponse.prototype['cancelled_at'] = undefined;

/**
 * @member {String} created_at
 */
DtoSubscriptionResponse.prototype['created_at'] = undefined;

/**
 * @member {String} created_by
 */
DtoSubscriptionResponse.prototype['created_by'] = undefined;

/**
 * Currency is the currency of the subscription in lowercase 3 digit ISO codes
 * @member {String} currency
 */
DtoSubscriptionResponse.prototype['currency'] = undefined;

/**
 * CurrentPeriodEnd is the end of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.
 * @member {String} current_period_end
 */
DtoSubscriptionResponse.prototype['current_period_end'] = undefined;

/**
 * CurrentPeriodStart is the end of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.
 * @member {String} current_period_start
 */
DtoSubscriptionResponse.prototype['current_period_start'] = undefined;

/**
 * @member {module:model/DtoCustomerResponse} customer
 */
DtoSubscriptionResponse.prototype['customer'] = undefined;

/**
 * CustomerID is the identifier for the customer in our system
 * @member {String} customer_id
 */
DtoSubscriptionResponse.prototype['customer_id'] = undefined;

/**
 * EndDate is the end date of the subscription
 * @member {String} end_date
 */
DtoSubscriptionResponse.prototype['end_date'] = undefined;

/**
 * EnvironmentID is the environment identifier for the subscription
 * @member {String} environment_id
 */
DtoSubscriptionResponse.prototype['environment_id'] = undefined;

/**
 * ID is the unique identifier for the subscription
 * @member {String} id
 */
DtoSubscriptionResponse.prototype['id'] = undefined;

/**
 * @member {Array.<module:model/SubscriptionSubscriptionLineItem>} line_items
 */
DtoSubscriptionResponse.prototype['line_items'] = undefined;

/**
 * LookupKey is the key used to lookup the subscription in our system
 * @member {String} lookup_key
 */
DtoSubscriptionResponse.prototype['lookup_key'] = undefined;

/**
 * @member {Object.<String, String>} metadata
 */
DtoSubscriptionResponse.prototype['metadata'] = undefined;

/**
 * @member {module:model/TypesPauseStatus} pause_status
 */
DtoSubscriptionResponse.prototype['pause_status'] = undefined;

/**
 * @member {Array.<module:model/SubscriptionSubscriptionPause>} pauses
 */
DtoSubscriptionResponse.prototype['pauses'] = undefined;

/**
 * @member {module:model/DtoPlanResponse} plan
 */
DtoSubscriptionResponse.prototype['plan'] = undefined;

/**
 * PlanID is the identifier for the plan in our system
 * @member {String} plan_id
 */
DtoSubscriptionResponse.prototype['plan_id'] = undefined;

/**
 * StartDate is the start date of the subscription
 * @member {String} start_date
 */
DtoSubscriptionResponse.prototype['start_date'] = undefined;

/**
 * @member {module:model/TypesStatus} status
 */
DtoSubscriptionResponse.prototype['status'] = undefined;

/**
 * @member {module:model/TypesSubscriptionStatus} subscription_status
 */
DtoSubscriptionResponse.prototype['subscription_status'] = undefined;

/**
 * @member {String} tenant_id
 */
DtoSubscriptionResponse.prototype['tenant_id'] = undefined;

/**
 * TrialEnd is the end date of the trial period
 * @member {String} trial_end
 */
DtoSubscriptionResponse.prototype['trial_end'] = undefined;

/**
 * TrialStart is the start date of the trial period
 * @member {String} trial_start
 */
DtoSubscriptionResponse.prototype['trial_start'] = undefined;

/**
 * @member {String} updated_at
 */
DtoSubscriptionResponse.prototype['updated_at'] = undefined;

/**
 * @member {String} updated_by
 */
DtoSubscriptionResponse.prototype['updated_by'] = undefined;

/**
 * Version is used for optimistic locking
 * @member {Number} version
 */
DtoSubscriptionResponse.prototype['version'] = undefined;






export default DtoSubscriptionResponse;

