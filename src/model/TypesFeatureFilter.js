/**
 * FlexPrice API
 * FlexPrice API Service
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TypesFilterCondition from './TypesFilterCondition';
import TypesSortCondition from './TypesSortCondition';
import TypesStatus from './TypesStatus';

/**
 * The TypesFeatureFilter model module.
 * @module model/TypesFeatureFilter
 * @version 1.0
 */
class TypesFeatureFilter {
    /**
     * Constructs a new <code>TypesFeatureFilter</code>.
     * @alias module:model/TypesFeatureFilter
     */
    constructor() { 
        
        TypesFeatureFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TypesFeatureFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TypesFeatureFilter} obj Optional instance to populate.
     * @return {module:model/TypesFeatureFilter} The populated <code>TypesFeatureFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TypesFeatureFilter();

            if (data.hasOwnProperty('end_time')) {
                obj['end_time'] = ApiClient.convertToType(data['end_time'], 'String');
            }
            if (data.hasOwnProperty('expand')) {
                obj['expand'] = ApiClient.convertToType(data['expand'], 'String');
            }
            if (data.hasOwnProperty('feature_ids')) {
                obj['feature_ids'] = ApiClient.convertToType(data['feature_ids'], ['String']);
            }
            if (data.hasOwnProperty('filters')) {
                obj['filters'] = ApiClient.convertToType(data['filters'], [TypesFilterCondition]);
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
            if (data.hasOwnProperty('lookup_key')) {
                obj['lookup_key'] = ApiClient.convertToType(data['lookup_key'], 'String');
            }
            if (data.hasOwnProperty('meter_ids')) {
                obj['meter_ids'] = ApiClient.convertToType(data['meter_ids'], ['String']);
            }
            if (data.hasOwnProperty('name_contains')) {
                obj['name_contains'] = ApiClient.convertToType(data['name_contains'], 'String');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = ApiClient.convertToType(data['order'], 'String');
            }
            if (data.hasOwnProperty('sort')) {
                obj['sort'] = ApiClient.convertToType(data['sort'], [TypesSortCondition]);
            }
            if (data.hasOwnProperty('start_time')) {
                obj['start_time'] = ApiClient.convertToType(data['start_time'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = TypesStatus.constructFromObject(data['status']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TypesFeatureFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TypesFeatureFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['end_time'] && !(typeof data['end_time'] === 'string' || data['end_time'] instanceof String)) {
            throw new Error("Expected the field `end_time` to be a primitive type in the JSON string but got " + data['end_time']);
        }
        // ensure the json data is a string
        if (data['expand'] && !(typeof data['expand'] === 'string' || data['expand'] instanceof String)) {
            throw new Error("Expected the field `expand` to be a primitive type in the JSON string but got " + data['expand']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['feature_ids'])) {
            throw new Error("Expected the field `feature_ids` to be an array in the JSON data but got " + data['feature_ids']);
        }
        if (data['filters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['filters'])) {
                throw new Error("Expected the field `filters` to be an array in the JSON data but got " + data['filters']);
            }
            // validate the optional field `filters` (array)
            for (const item of data['filters']) {
                TypesFilterCondition.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['lookup_key'] && !(typeof data['lookup_key'] === 'string' || data['lookup_key'] instanceof String)) {
            throw new Error("Expected the field `lookup_key` to be a primitive type in the JSON string but got " + data['lookup_key']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['meter_ids'])) {
            throw new Error("Expected the field `meter_ids` to be an array in the JSON data but got " + data['meter_ids']);
        }
        // ensure the json data is a string
        if (data['name_contains'] && !(typeof data['name_contains'] === 'string' || data['name_contains'] instanceof String)) {
            throw new Error("Expected the field `name_contains` to be a primitive type in the JSON string but got " + data['name_contains']);
        }
        // ensure the json data is a string
        if (data['order'] && !(typeof data['order'] === 'string' || data['order'] instanceof String)) {
            throw new Error("Expected the field `order` to be a primitive type in the JSON string but got " + data['order']);
        }
        if (data['sort']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sort'])) {
                throw new Error("Expected the field `sort` to be an array in the JSON data but got " + data['sort']);
            }
            // validate the optional field `sort` (array)
            for (const item of data['sort']) {
                TypesSortCondition.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['start_time'] && !(typeof data['start_time'] === 'string' || data['start_time'] instanceof String)) {
            throw new Error("Expected the field `start_time` to be a primitive type in the JSON string but got " + data['start_time']);
        }

        return true;
    }


}



/**
 * @member {String} end_time
 */
TypesFeatureFilter.prototype['end_time'] = undefined;

/**
 * @member {String} expand
 */
TypesFeatureFilter.prototype['expand'] = undefined;

/**
 * Feature specific filters
 * @member {Array.<String>} feature_ids
 */
TypesFeatureFilter.prototype['feature_ids'] = undefined;

/**
 * filters allows complex filtering based on multiple fields
 * @member {Array.<module:model/TypesFilterCondition>} filters
 */
TypesFeatureFilter.prototype['filters'] = undefined;

/**
 * @member {Number} limit
 */
TypesFeatureFilter.prototype['limit'] = undefined;

/**
 * @member {String} lookup_key
 */
TypesFeatureFilter.prototype['lookup_key'] = undefined;

/**
 * @member {Array.<String>} meter_ids
 */
TypesFeatureFilter.prototype['meter_ids'] = undefined;

/**
 * @member {String} name_contains
 */
TypesFeatureFilter.prototype['name_contains'] = undefined;

/**
 * @member {Number} offset
 */
TypesFeatureFilter.prototype['offset'] = undefined;

/**
 * @member {module:model/TypesFeatureFilter.OrderEnum} order
 */
TypesFeatureFilter.prototype['order'] = undefined;

/**
 * @member {Array.<module:model/TypesSortCondition>} sort
 */
TypesFeatureFilter.prototype['sort'] = undefined;

/**
 * @member {String} start_time
 */
TypesFeatureFilter.prototype['start_time'] = undefined;

/**
 * @member {module:model/TypesStatus} status
 */
TypesFeatureFilter.prototype['status'] = undefined;





/**
 * Allowed values for the <code>order</code> property.
 * @enum {String}
 * @readonly
 */
TypesFeatureFilter['OrderEnum'] = {

    /**
     * value: "asc"
     * @const
     */
    "asc": "asc",

    /**
     * value: "desc"
     * @const
     */
    "desc": "desc"
};



export default TypesFeatureFilter;

