/**
 * FlexPrice API
 * FlexPrice API Service
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DtoCreateFeatureRequest from '../model/DtoCreateFeatureRequest';
import DtoFeatureResponse from '../model/DtoFeatureResponse';
import DtoListFeaturesResponse from '../model/DtoListFeaturesResponse';
import DtoUpdateFeatureRequest from '../model/DtoUpdateFeatureRequest';
import ErrorsErrorResponse from '../model/ErrorsErrorResponse';
import TypesFeatureFilter from '../model/TypesFeatureFilter';

/**
* Features service.
* @module api/FeaturesApi
* @version 1.0
*/
export default class FeaturesApi {

    /**
    * Constructs a new FeaturesApi. 
    * @alias module:api/FeaturesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the featuresGet operation.
     * @callback module:api/FeaturesApi~featuresGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DtoListFeaturesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List features
     * List features with optional filtering
     * @param {Object} opts Optional parameters
     * @param {String} [endTime] 
     * @param {String} [expand] 
     * @param {Array.<String>} [featureIds] Feature specific filters
     * @param {Number} [limit] 
     * @param {String} [lookupKey] 
     * @param {Array.<String>} [meterIds] 
     * @param {String} [nameContains] 
     * @param {Number} [offset] 
     * @param {module:model/String} [order] 
     * @param {String} [startTime] 
     * @param {module:model/String} [status] 
     * @param {module:api/FeaturesApi~featuresGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DtoListFeaturesResponse}
     */
    featuresGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'end_time': opts['endTime'],
        'expand': opts['expand'],
        'feature_ids': this.apiClient.buildCollectionParam(opts['featureIds'], 'csv'),
        'limit': opts['limit'],
        'lookup_key': opts['lookupKey'],
        'meter_ids': this.apiClient.buildCollectionParam(opts['meterIds'], 'csv'),
        'name_contains': opts['nameContains'],
        'offset': opts['offset'],
        'order': opts['order'],
        'start_time': opts['startTime'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DtoListFeaturesResponse;
      return this.apiClient.callApi(
        '/features', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the featuresIdDelete operation.
     * @callback module:api/FeaturesApi~featuresIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a feature
     * Delete a feature by ID
     * @param {String} id Feature ID
     * @param {module:api/FeaturesApi~featuresIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    featuresIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling featuresIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/features/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the featuresIdGet operation.
     * @callback module:api/FeaturesApi~featuresIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DtoFeatureResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a feature by ID
     * Get a feature by ID
     * @param {String} id Feature ID
     * @param {module:api/FeaturesApi~featuresIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DtoFeatureResponse}
     */
    featuresIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling featuresIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DtoFeatureResponse;
      return this.apiClient.callApi(
        '/features/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the featuresIdPut operation.
     * @callback module:api/FeaturesApi~featuresIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DtoFeatureResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a feature
     * Update a feature by ID
     * @param {String} id Feature ID
     * @param {module:model/DtoUpdateFeatureRequest} feature Feature update data
     * @param {module:api/FeaturesApi~featuresIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DtoFeatureResponse}
     */
    featuresIdPut(id, feature, callback) {
      let postBody = feature;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling featuresIdPut");
      }
      // verify the required parameter 'feature' is set
      if (feature === undefined || feature === null) {
        throw new Error("Missing the required parameter 'feature' when calling featuresIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DtoFeatureResponse;
      return this.apiClient.callApi(
        '/features/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the featuresPost operation.
     * @callback module:api/FeaturesApi~featuresPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DtoFeatureResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new feature
     * Create a new feature
     * @param {module:model/DtoCreateFeatureRequest} feature Feature to create
     * @param {module:api/FeaturesApi~featuresPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DtoFeatureResponse}
     */
    featuresPost(feature, callback) {
      let postBody = feature;
      // verify the required parameter 'feature' is set
      if (feature === undefined || feature === null) {
        throw new Error("Missing the required parameter 'feature' when calling featuresPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DtoFeatureResponse;
      return this.apiClient.callApi(
        '/features', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the featuresSearchPost operation.
     * @callback module:api/FeaturesApi~featuresSearchPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DtoListFeaturesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List features by filter
     * List features by filter
     * @param {module:model/TypesFeatureFilter} filter Filter
     * @param {module:api/FeaturesApi~featuresSearchPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DtoListFeaturesResponse}
     */
    featuresSearchPost(filter, callback) {
      let postBody = filter;
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling featuresSearchPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DtoListFeaturesResponse;
      return this.apiClient.callApi(
        '/features/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
