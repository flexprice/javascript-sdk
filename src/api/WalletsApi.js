/**
 * FlexPrice API
 * FlexPrice API Service
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DtoCreateWalletRequest from '../model/DtoCreateWalletRequest';
import DtoListWalletTransactionsResponse from '../model/DtoListWalletTransactionsResponse';
import DtoTopUpWalletRequest from '../model/DtoTopUpWalletRequest';
import DtoUpdateWalletRequest from '../model/DtoUpdateWalletRequest';
import DtoWalletBalanceResponse from '../model/DtoWalletBalanceResponse';
import DtoWalletResponse from '../model/DtoWalletResponse';
import ErrorsErrorResponse from '../model/ErrorsErrorResponse';

/**
* Wallets service.
* @module api/WalletsApi
* @version 1.0
*/
export default class WalletsApi {

    /**
    * Constructs a new WalletsApi. 
    * @alias module:api/WalletsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the customersIdWalletsGet operation.
     * @callback module:api/WalletsApi~customersIdWalletsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DtoWalletResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get wallets by customer ID
     * Get all wallets for a customer
     * @param {String} id Customer ID
     * @param {module:api/WalletsApi~customersIdWalletsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DtoWalletResponse>}
     */
    customersIdWalletsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling customersIdWalletsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DtoWalletResponse];
      return this.apiClient.callApi(
        '/customers/{id}/wallets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customersWalletsGet operation.
     * @callback module:api/WalletsApi~customersWalletsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DtoWalletResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Customer Wallets
     * Get all wallets for a customer by lookup key or id
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {Boolean} [includeRealTimeBalance = false)] 
     * @param {String} [lookupKey] 
     * @param {module:api/WalletsApi~customersWalletsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DtoWalletResponse>}
     */
    customersWalletsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'include_real_time_balance': opts['includeRealTimeBalance'],
        'lookup_key': opts['lookupKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DtoWalletResponse];
      return this.apiClient.callApi(
        '/customers/wallets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the walletsIdBalanceRealTimeGet operation.
     * @callback module:api/WalletsApi~walletsIdBalanceRealTimeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DtoWalletBalanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get wallet balance
     * Get real-time balance of a wallet
     * @param {String} id Wallet ID
     * @param {module:api/WalletsApi~walletsIdBalanceRealTimeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DtoWalletBalanceResponse}
     */
    walletsIdBalanceRealTimeGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling walletsIdBalanceRealTimeGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DtoWalletBalanceResponse;
      return this.apiClient.callApi(
        '/wallets/{id}/balance/real-time', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the walletsIdGet operation.
     * @callback module:api/WalletsApi~walletsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DtoWalletResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get wallet by ID
     * Get a wallet by its ID
     * @param {String} id Wallet ID
     * @param {module:api/WalletsApi~walletsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DtoWalletResponse}
     */
    walletsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling walletsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DtoWalletResponse;
      return this.apiClient.callApi(
        '/wallets/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the walletsIdPut operation.
     * @callback module:api/WalletsApi~walletsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DtoWalletResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a wallet
     * Update a wallet's details including auto top-up configuration
     * @param {String} id Wallet ID
     * @param {module:model/DtoUpdateWalletRequest} request Update wallet request
     * @param {module:api/WalletsApi~walletsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DtoWalletResponse}
     */
    walletsIdPut(id, request, callback) {
      let postBody = request;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling walletsIdPut");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling walletsIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DtoWalletResponse;
      return this.apiClient.callApi(
        '/wallets/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the walletsIdTerminatePost operation.
     * @callback module:api/WalletsApi~walletsIdTerminatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DtoWalletResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Terminate a wallet
     * Terminates a wallet by closing it and debiting remaining balance
     * @param {String} id Wallet ID
     * @param {module:api/WalletsApi~walletsIdTerminatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DtoWalletResponse}
     */
    walletsIdTerminatePost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling walletsIdTerminatePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DtoWalletResponse;
      return this.apiClient.callApi(
        '/wallets/{id}/terminate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the walletsIdTopUpPost operation.
     * @callback module:api/WalletsApi~walletsIdTopUpPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DtoWalletResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Top up wallet
     * Add credits to a wallet
     * @param {String} id Wallet ID
     * @param {module:model/DtoTopUpWalletRequest} request Top up request
     * @param {module:api/WalletsApi~walletsIdTopUpPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DtoWalletResponse}
     */
    walletsIdTopUpPost(id, request, callback) {
      let postBody = request;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling walletsIdTopUpPost");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling walletsIdTopUpPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DtoWalletResponse;
      return this.apiClient.callApi(
        '/wallets/{id}/top-up', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the walletsIdTransactionsGet operation.
     * @callback module:api/WalletsApi~walletsIdTransactionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DtoListWalletTransactionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get wallet transactions
     * Get transactions for a wallet with pagination
     * @param {String} id Wallet ID
     * @param {Object} opts Optional parameters
     * @param {Number} [creditsAvailableGt] 
     * @param {String} [endTime] 
     * @param {String} [expand] 
     * @param {String} [expiryDateAfter] 
     * @param {String} [expiryDateBefore] 
     * @param {String} [id2] 
     * @param {Number} [limit] 
     * @param {Number} [offset] 
     * @param {module:model/String} [order] 
     * @param {String} [referenceId] 
     * @param {String} [referenceType] 
     * @param {String} [sort] 
     * @param {String} [startTime] 
     * @param {module:model/String} [status] 
     * @param {module:model/String} [transactionReason] 
     * @param {module:model/String} [transactionStatus] 
     * @param {module:model/String} [type] 
     * @param {module:api/WalletsApi~walletsIdTransactionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DtoListWalletTransactionsResponse}
     */
    walletsIdTransactionsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling walletsIdTransactionsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'credits_available_gt': opts['creditsAvailableGt'],
        'end_time': opts['endTime'],
        'expand': opts['expand'],
        'expiry_date_after': opts['expiryDateAfter'],
        'expiry_date_before': opts['expiryDateBefore'],
        'id': opts['id2'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'order': opts['order'],
        'reference_id': opts['referenceId'],
        'reference_type': opts['referenceType'],
        'sort': opts['sort'],
        'start_time': opts['startTime'],
        'status': opts['status'],
        'transaction_reason': opts['transactionReason'],
        'transaction_status': opts['transactionStatus'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DtoListWalletTransactionsResponse;
      return this.apiClient.callApi(
        '/wallets/{id}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the walletsPost operation.
     * @callback module:api/WalletsApi~walletsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DtoWalletResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new wallet
     * Create a new wallet for a customer
     * @param {module:model/DtoCreateWalletRequest} request Create wallet request
     * @param {module:api/WalletsApi~walletsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DtoWalletResponse}
     */
    walletsPost(request, callback) {
      let postBody = request;
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling walletsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DtoWalletResponse;
      return this.apiClient.callApi(
        '/wallets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
