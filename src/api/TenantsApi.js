/**
 * FlexPrice API
 * FlexPrice API Service
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DtoCreateTenantRequest from '../model/DtoCreateTenantRequest';
import DtoTenantBillingUsage from '../model/DtoTenantBillingUsage';
import DtoTenantResponse from '../model/DtoTenantResponse';
import DtoUpdateTenantRequest from '../model/DtoUpdateTenantRequest';
import ErrorsErrorResponse from '../model/ErrorsErrorResponse';

/**
* Tenants service.
* @module api/TenantsApi
* @version 1.0
*/
export default class TenantsApi {

    /**
    * Constructs a new TenantsApi. 
    * @alias module:api/TenantsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the tenantBillingGet operation.
     * @callback module:api/TenantsApi~tenantBillingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DtoTenantBillingUsage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get billing usage for the current tenant
     * Get the subscription and usage details for the current tenant
     * @param {module:api/TenantsApi~tenantBillingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DtoTenantBillingUsage}
     */
    tenantBillingGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DtoTenantBillingUsage;
      return this.apiClient.callApi(
        '/tenant/billing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenantsIdGet operation.
     * @callback module:api/TenantsApi~tenantsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DtoTenantResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tenant by ID
     * Get tenant by ID
     * @param {String} id Tenant ID
     * @param {module:api/TenantsApi~tenantsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DtoTenantResponse}
     */
    tenantsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenantsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DtoTenantResponse;
      return this.apiClient.callApi(
        '/tenants/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenantsPost operation.
     * @callback module:api/TenantsApi~tenantsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DtoTenantResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new tenant
     * Create a new tenant
     * @param {module:model/DtoCreateTenantRequest} request Create tenant request
     * @param {module:api/TenantsApi~tenantsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DtoTenantResponse}
     */
    tenantsPost(request, callback) {
      let postBody = request;
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling tenantsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DtoTenantResponse;
      return this.apiClient.callApi(
        '/tenants', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenantsUpdatePut operation.
     * @callback module:api/TenantsApi~tenantsUpdatePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DtoTenantResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a tenant
     * Update a tenant's details including name and billing information
     * @param {module:model/DtoUpdateTenantRequest} request Update tenant request
     * @param {module:api/TenantsApi~tenantsUpdatePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DtoTenantResponse}
     */
    tenantsUpdatePut(request, callback) {
      let postBody = request;
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling tenantsUpdatePut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DtoTenantResponse;
      return this.apiClient.callApi(
        '/tenants/update', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
