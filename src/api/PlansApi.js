/**
 * FlexPrice API
 * FlexPrice API Service
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DtoCreatePlanRequest from '../model/DtoCreatePlanRequest';
import DtoListPlansResponse from '../model/DtoListPlansResponse';
import DtoPlanResponse from '../model/DtoPlanResponse';
import DtoUpdatePlanRequest from '../model/DtoUpdatePlanRequest';
import ErrorsErrorResponse from '../model/ErrorsErrorResponse';

/**
* Plans service.
* @module api/PlansApi
* @version 1.0
*/
export default class PlansApi {

    /**
    * Constructs a new PlansApi. 
    * @alias module:api/PlansApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the plansGet operation.
     * @callback module:api/PlansApi~plansGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DtoListPlansResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get plans
     * Get plans with optional filtering
     * @param {Object} opts Optional parameters
     * @param {String} [endTime] 
     * @param {String} [expand] 
     * @param {Number} [limit] 
     * @param {Number} [offset] 
     * @param {module:model/String} [order] 
     * @param {Array.<String>} [planIds] 
     * @param {String} [sort] 
     * @param {String} [startTime] 
     * @param {module:model/String} [status] 
     * @param {module:api/PlansApi~plansGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DtoListPlansResponse}
     */
    plansGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'end_time': opts['endTime'],
        'expand': opts['expand'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'order': opts['order'],
        'plan_ids': this.apiClient.buildCollectionParam(opts['planIds'], 'csv'),
        'sort': opts['sort'],
        'start_time': opts['startTime'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DtoListPlansResponse;
      return this.apiClient.callApi(
        '/plans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the plansIdDelete operation.
     * @callback module:api/PlansApi~plansIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a plan
     * Delete a plan by ID
     * @param {String} id Plan ID
     * @param {module:api/PlansApi~plansIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    plansIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling plansIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/plans/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the plansIdGet operation.
     * @callback module:api/PlansApi~plansIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DtoPlanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a plan
     * Get a plan by ID
     * @param {String} id Plan ID
     * @param {module:api/PlansApi~plansIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DtoPlanResponse}
     */
    plansIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling plansIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DtoPlanResponse;
      return this.apiClient.callApi(
        '/plans/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the plansIdPut operation.
     * @callback module:api/PlansApi~plansIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DtoPlanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a plan
     * Update a plan by ID
     * @param {String} id Plan ID
     * @param {module:model/DtoUpdatePlanRequest} plan Plan update
     * @param {module:api/PlansApi~plansIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DtoPlanResponse}
     */
    plansIdPut(id, plan, callback) {
      let postBody = plan;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling plansIdPut");
      }
      // verify the required parameter 'plan' is set
      if (plan === undefined || plan === null) {
        throw new Error("Missing the required parameter 'plan' when calling plansIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DtoPlanResponse;
      return this.apiClient.callApi(
        '/plans/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the plansPost operation.
     * @callback module:api/PlansApi~plansPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DtoPlanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new plan
     * Create a new plan with the specified configuration
     * @param {module:model/DtoCreatePlanRequest} plan Plan configuration
     * @param {module:api/PlansApi~plansPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DtoPlanResponse}
     */
    plansPost(plan, callback) {
      let postBody = plan;
      // verify the required parameter 'plan' is set
      if (plan === undefined || plan === null) {
        throw new Error("Missing the required parameter 'plan' when calling plansPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DtoPlanResponse;
      return this.apiClient.callApi(
        '/plans', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
