/**
 * FlexPrice API
 * FlexPrice API Service
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DtoCreateEntitlementRequest from '../model/DtoCreateEntitlementRequest';
import DtoEntitlementResponse from '../model/DtoEntitlementResponse';
import DtoListEntitlementsResponse from '../model/DtoListEntitlementsResponse';
import DtoPlanResponse from '../model/DtoPlanResponse';
import DtoUpdateEntitlementRequest from '../model/DtoUpdateEntitlementRequest';
import ErrorsErrorResponse from '../model/ErrorsErrorResponse';

/**
* Entitlements service.
* @module api/EntitlementsApi
* @version 1.0
*/
export default class EntitlementsApi {

    /**
    * Constructs a new EntitlementsApi. 
    * @alias module:api/EntitlementsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the entitlementsGet operation.
     * @callback module:api/EntitlementsApi~entitlementsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DtoListEntitlementsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get entitlements
     * Get entitlements with the specified filter
     * @param {Object} opts Optional parameters
     * @param {String} [endTime] 
     * @param {String} [expand] 
     * @param {Array.<String>} [featureIds] 
     * @param {module:model/String} [featureType] 
     * @param {Boolean} [isEnabled] 
     * @param {Number} [limit] 
     * @param {Number} [offset] 
     * @param {module:model/String} [order] 
     * @param {Array.<String>} [planIds] Specific filters for entitlements
     * @param {String} [sort] 
     * @param {String} [startTime] 
     * @param {module:model/String} [status] 
     * @param {module:api/EntitlementsApi~entitlementsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DtoListEntitlementsResponse}
     */
    entitlementsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'end_time': opts['endTime'],
        'expand': opts['expand'],
        'feature_ids': this.apiClient.buildCollectionParam(opts['featureIds'], 'csv'),
        'feature_type': opts['featureType'],
        'is_enabled': opts['isEnabled'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'order': opts['order'],
        'plan_ids': this.apiClient.buildCollectionParam(opts['planIds'], 'csv'),
        'sort': opts['sort'],
        'start_time': opts['startTime'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DtoListEntitlementsResponse;
      return this.apiClient.callApi(
        '/entitlements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the entitlementsIdDelete operation.
     * @callback module:api/EntitlementsApi~entitlementsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an entitlement
     * Delete an entitlement
     * @param {String} id Entitlement ID
     * @param {module:api/EntitlementsApi~entitlementsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    entitlementsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling entitlementsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/entitlements/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the entitlementsIdGet operation.
     * @callback module:api/EntitlementsApi~entitlementsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DtoEntitlementResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an entitlement by ID
     * Get an entitlement by ID
     * @param {String} id Entitlement ID
     * @param {module:api/EntitlementsApi~entitlementsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DtoEntitlementResponse}
     */
    entitlementsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling entitlementsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DtoEntitlementResponse;
      return this.apiClient.callApi(
        '/entitlements/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the entitlementsIdPut operation.
     * @callback module:api/EntitlementsApi~entitlementsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DtoEntitlementResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an entitlement
     * Update an entitlement with the specified configuration
     * @param {String} id Entitlement ID
     * @param {module:model/DtoUpdateEntitlementRequest} entitlement Entitlement configuration
     * @param {module:api/EntitlementsApi~entitlementsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DtoEntitlementResponse}
     */
    entitlementsIdPut(id, entitlement, callback) {
      let postBody = entitlement;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling entitlementsIdPut");
      }
      // verify the required parameter 'entitlement' is set
      if (entitlement === undefined || entitlement === null) {
        throw new Error("Missing the required parameter 'entitlement' when calling entitlementsIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DtoEntitlementResponse;
      return this.apiClient.callApi(
        '/entitlements/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the entitlementsPost operation.
     * @callback module:api/EntitlementsApi~entitlementsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DtoEntitlementResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new entitlement
     * Create a new entitlement with the specified configuration
     * @param {module:model/DtoCreateEntitlementRequest} entitlement Entitlement configuration
     * @param {module:api/EntitlementsApi~entitlementsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DtoEntitlementResponse}
     */
    entitlementsPost(entitlement, callback) {
      let postBody = entitlement;
      // verify the required parameter 'entitlement' is set
      if (entitlement === undefined || entitlement === null) {
        throw new Error("Missing the required parameter 'entitlement' when calling entitlementsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DtoEntitlementResponse;
      return this.apiClient.callApi(
        '/entitlements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the plansIdEntitlementsGet operation.
     * @callback module:api/EntitlementsApi~plansIdEntitlementsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DtoPlanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get plan entitlements
     * Get all entitlements for a plan
     * @param {String} id Plan ID
     * @param {module:api/EntitlementsApi~plansIdEntitlementsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DtoPlanResponse}
     */
    plansIdEntitlementsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling plansIdEntitlementsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DtoPlanResponse;
      return this.apiClient.callApi(
        '/plans/{id}/entitlements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
