/**
 * FlexPrice API
 * FlexPrice API Service
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DtoCreateEnvironmentRequest from '../model/DtoCreateEnvironmentRequest';
import DtoEnvironmentResponse from '../model/DtoEnvironmentResponse';
import DtoListEnvironmentsResponse from '../model/DtoListEnvironmentsResponse';
import DtoUpdateEnvironmentRequest from '../model/DtoUpdateEnvironmentRequest';
import ErrorsErrorResponse from '../model/ErrorsErrorResponse';

/**
* Environments service.
* @module api/EnvironmentsApi
* @version 1.0
*/
export default class EnvironmentsApi {

    /**
    * Constructs a new EnvironmentsApi. 
    * @alias module:api/EnvironmentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the environmentsGet operation.
     * @callback module:api/EnvironmentsApi~environmentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DtoListEnvironmentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get environments
     * Get environments
     * @param {Object} opts Optional parameters
     * @param {String} [expand] 
     * @param {Number} [limit] 
     * @param {Number} [offset] 
     * @param {String} [order] 
     * @param {String} [sort] 
     * @param {module:model/String} [status] 
     * @param {module:api/EnvironmentsApi~environmentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DtoListEnvironmentsResponse}
     */
    environmentsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'expand': opts['expand'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'order': opts['order'],
        'sort': opts['sort'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DtoListEnvironmentsResponse;
      return this.apiClient.callApi(
        '/environments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the environmentsIdGet operation.
     * @callback module:api/EnvironmentsApi~environmentsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DtoEnvironmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an environment
     * Get an environment
     * @param {String} id Environment ID
     * @param {module:api/EnvironmentsApi~environmentsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DtoEnvironmentResponse}
     */
    environmentsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling environmentsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DtoEnvironmentResponse;
      return this.apiClient.callApi(
        '/environments/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the environmentsIdPut operation.
     * @callback module:api/EnvironmentsApi~environmentsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DtoEnvironmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an environment
     * Update an environment
     * @param {String} id Environment ID
     * @param {module:model/DtoUpdateEnvironmentRequest} environment Environment
     * @param {module:api/EnvironmentsApi~environmentsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DtoEnvironmentResponse}
     */
    environmentsIdPut(id, environment, callback) {
      let postBody = environment;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling environmentsIdPut");
      }
      // verify the required parameter 'environment' is set
      if (environment === undefined || environment === null) {
        throw new Error("Missing the required parameter 'environment' when calling environmentsIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DtoEnvironmentResponse;
      return this.apiClient.callApi(
        '/environments/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the environmentsPost operation.
     * @callback module:api/EnvironmentsApi~environmentsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DtoEnvironmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an environment
     * Create an environment
     * @param {module:model/DtoCreateEnvironmentRequest} environment Environment
     * @param {module:api/EnvironmentsApi~environmentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DtoEnvironmentResponse}
     */
    environmentsPost(environment, callback) {
      let postBody = environment;
      // verify the required parameter 'environment' is set
      if (environment === undefined || environment === null) {
        throw new Error("Missing the required parameter 'environment' when calling environmentsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DtoEnvironmentResponse;
      return this.apiClient.callApi(
        '/environments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
