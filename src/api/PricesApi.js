/**
 * FlexPrice API
 * FlexPrice API Service
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DtoCreatePriceRequest from '../model/DtoCreatePriceRequest';
import DtoListPricesResponse from '../model/DtoListPricesResponse';
import DtoPriceResponse from '../model/DtoPriceResponse';
import DtoUpdatePriceRequest from '../model/DtoUpdatePriceRequest';
import ErrorsErrorResponse from '../model/ErrorsErrorResponse';

/**
* Prices service.
* @module api/PricesApi
* @version 1.0
*/
export default class PricesApi {

    /**
    * Constructs a new PricesApi. 
    * @alias module:api/PricesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the pricesGet operation.
     * @callback module:api/PricesApi~pricesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DtoListPricesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get prices
     * Get prices with the specified filter
     * @param {Object} opts Optional parameters
     * @param {String} [endTime] 
     * @param {String} [expand] 
     * @param {Number} [limit] 
     * @param {Number} [offset] 
     * @param {module:model/String} [order] 
     * @param {Array.<String>} [planIds] 
     * @param {Array.<String>} [priceIds] 
     * @param {String} [sort] 
     * @param {String} [startTime] 
     * @param {module:model/String} [status] 
     * @param {module:api/PricesApi~pricesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DtoListPricesResponse}
     */
    pricesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'end_time': opts['endTime'],
        'expand': opts['expand'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'order': opts['order'],
        'plan_ids': this.apiClient.buildCollectionParam(opts['planIds'], 'csv'),
        'price_ids': this.apiClient.buildCollectionParam(opts['priceIds'], 'csv'),
        'sort': opts['sort'],
        'start_time': opts['startTime'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DtoListPricesResponse;
      return this.apiClient.callApi(
        '/prices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pricesIdDelete operation.
     * @callback module:api/PricesApi~pricesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a price
     * Delete a price
     * @param {String} id Price ID
     * @param {module:api/PricesApi~pricesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    pricesIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling pricesIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/prices/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pricesIdGet operation.
     * @callback module:api/PricesApi~pricesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DtoPriceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a price by ID
     * Get a price by ID
     * @param {String} id Price ID
     * @param {module:api/PricesApi~pricesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DtoPriceResponse}
     */
    pricesIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling pricesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DtoPriceResponse;
      return this.apiClient.callApi(
        '/prices/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pricesIdPut operation.
     * @callback module:api/PricesApi~pricesIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DtoPriceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a price
     * Update a price with the specified configuration
     * @param {String} id Price ID
     * @param {module:model/DtoUpdatePriceRequest} price Price configuration
     * @param {module:api/PricesApi~pricesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DtoPriceResponse}
     */
    pricesIdPut(id, price, callback) {
      let postBody = price;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling pricesIdPut");
      }
      // verify the required parameter 'price' is set
      if (price === undefined || price === null) {
        throw new Error("Missing the required parameter 'price' when calling pricesIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DtoPriceResponse;
      return this.apiClient.callApi(
        '/prices/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pricesPost operation.
     * @callback module:api/PricesApi~pricesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DtoPriceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new price
     * Create a new price with the specified configuration
     * @param {module:model/DtoCreatePriceRequest} price Price configuration
     * @param {module:api/PricesApi~pricesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DtoPriceResponse}
     */
    pricesPost(price, callback) {
      let postBody = price;
      // verify the required parameter 'price' is set
      if (price === undefined || price === null) {
        throw new Error("Missing the required parameter 'price' when calling pricesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DtoPriceResponse;
      return this.apiClient.callApi(
        '/prices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
