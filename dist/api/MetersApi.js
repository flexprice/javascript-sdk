/**
 * FlexPrice API
 * FlexPrice API Service
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import DtoCreateMeterRequest from '../model/DtoCreateMeterRequest';
import DtoListMetersResponse from '../model/DtoListMetersResponse';
import DtoMeterResponse from '../model/DtoMeterResponse';
import DtoUpdateMeterRequest from '../model/DtoUpdateMeterRequest';
import ErrorsErrorResponse from '../model/ErrorsErrorResponse';

/**
* Meters service.
* @module api/MetersApi
* @version 1.0
*/
export default class MetersApi {
  /**
  * Constructs a new MetersApi. 
  * @alias module:api/MetersApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the metersGet operation.
   * @callback module:api/MetersApi~metersGetCallback
   * @param {String} error Error message, if any.
   * @param {module:model/DtoListMetersResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * List meters
   * Get all meters
   * @param {Object} opts Optional parameters
   * @param {String} [endTime] 
   * @param {String} [eventName] 
   * @param {String} [expand] 
   * @param {Number} [limit] 
   * @param {Array.<String>} [meterIds] 
   * @param {Number} [offset] 
   * @param {module:model/String} [order] 
   * @param {String} [sort] 
   * @param {String} [startTime] 
   * @param {module:model/String} [status] 
   * @param {module:api/MetersApi~metersGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/DtoListMetersResponse}
   */
  metersGet(opts, callback) {
    opts = opts || {};
    let postBody = null;
    let pathParams = {};
    let queryParams = {
      'end_time': opts['endTime'],
      'event_name': opts['eventName'],
      'expand': opts['expand'],
      'limit': opts['limit'],
      'meter_ids': this.apiClient.buildCollectionParam(opts['meterIds'], 'csv'),
      'offset': opts['offset'],
      'order': opts['order'],
      'sort': opts['sort'],
      'start_time': opts['startTime'],
      'status': opts['status']
    };
    let headerParams = {};
    let formParams = {};
    let authNames = ['ApiKeyAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = DtoListMetersResponse;
    return this.apiClient.callApi('/meters', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }

  /**
   * Callback function to receive the result of the metersIdDelete operation.
   * @callback module:api/MetersApi~metersIdDeleteCallback
   * @param {String} error Error message, if any.
   * @param {Object.<String, {String: String}>} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Delete meter
   * Delete an existing meter
   * @param {String} id Meter ID
   * @param {module:api/MetersApi~metersIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link Object.<String, {String: String}>}
   */
  metersIdDelete(id, callback) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling metersIdDelete");
    }
    let pathParams = {
      'id': id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['ApiKeyAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = {
      'String': 'String'
    };
    return this.apiClient.callApi('/meters/{id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }

  /**
   * Callback function to receive the result of the metersIdDisablePost operation.
   * @callback module:api/MetersApi~metersIdDisablePostCallback
   * @param {String} error Error message, if any.
   * @param {Object.<String, {String: String}>} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Disable meter [TODO: Deprecate]
   * Disable an existing meter
   * @param {String} id Meter ID
   * @param {module:api/MetersApi~metersIdDisablePostCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link Object.<String, {String: String}>}
   */
  metersIdDisablePost(id, callback) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling metersIdDisablePost");
    }
    let pathParams = {
      'id': id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['ApiKeyAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = {
      'String': 'String'
    };
    return this.apiClient.callApi('/meters/{id}/disable', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }

  /**
   * Callback function to receive the result of the metersIdGet operation.
   * @callback module:api/MetersApi~metersIdGetCallback
   * @param {String} error Error message, if any.
   * @param {module:model/DtoMeterResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get meter
   * Get a specific meter by ID
   * @param {String} id Meter ID
   * @param {module:api/MetersApi~metersIdGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/DtoMeterResponse}
   */
  metersIdGet(id, callback) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling metersIdGet");
    }
    let pathParams = {
      'id': id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['ApiKeyAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = DtoMeterResponse;
    return this.apiClient.callApi('/meters/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }

  /**
   * Callback function to receive the result of the metersIdPut operation.
   * @callback module:api/MetersApi~metersIdPutCallback
   * @param {String} error Error message, if any.
   * @param {module:model/DtoMeterResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Update meter
   * Update an existing meter
   * @param {String} id Meter ID
   * @param {module:model/DtoUpdateMeterRequest} meter Meter configuration
   * @param {module:api/MetersApi~metersIdPutCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/DtoMeterResponse}
   */
  metersIdPut(id, meter, callback) {
    let postBody = meter;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling metersIdPut");
    }
    // verify the required parameter 'meter' is set
    if (meter === undefined || meter === null) {
      throw new Error("Missing the required parameter 'meter' when calling metersIdPut");
    }
    let pathParams = {
      'id': id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['ApiKeyAuth'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = DtoMeterResponse;
    return this.apiClient.callApi('/meters/{id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }

  /**
   * Callback function to receive the result of the metersPost operation.
   * @callback module:api/MetersApi~metersPostCallback
   * @param {String} error Error message, if any.
   * @param {module:model/DtoMeterResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Create meter
   * Create a new meter with the specified configuration
   * @param {module:model/DtoCreateMeterRequest} meter Meter configuration
   * @param {module:api/MetersApi~metersPostCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/DtoMeterResponse}
   */
  metersPost(meter, callback) {
    let postBody = meter;
    // verify the required parameter 'meter' is set
    if (meter === undefined || meter === null) {
      throw new Error("Missing the required parameter 'meter' when calling metersPost");
    }
    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['ApiKeyAuth'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = DtoMeterResponse;
    return this.apiClient.callApi('/meters', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }
}