/**
 * FlexPrice API
 * FlexPrice API Service
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import DtoCreateCustomerRequest from '../model/DtoCreateCustomerRequest';
import DtoCustomerEntitlementsResponse from '../model/DtoCustomerEntitlementsResponse';
import DtoCustomerResponse from '../model/DtoCustomerResponse';
import DtoCustomerUsageSummaryResponse from '../model/DtoCustomerUsageSummaryResponse';
import DtoListCustomersResponse from '../model/DtoListCustomersResponse';
import DtoUpdateCustomerRequest from '../model/DtoUpdateCustomerRequest';
import ErrorsErrorResponse from '../model/ErrorsErrorResponse';

/**
* Customers service.
* @module api/CustomersApi
* @version 1.0
*/
export default class CustomersApi {
  /**
  * Constructs a new CustomersApi. 
  * @alias module:api/CustomersApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the customersGet operation.
   * @callback module:api/CustomersApi~customersGetCallback
   * @param {String} error Error message, if any.
   * @param {module:model/DtoListCustomersResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get customers
   * Get customers
   * @param {Object} opts Optional parameters
   * @param {Array.<String>} [customerIds] 
   * @param {String} [email] 
   * @param {String} [endTime] 
   * @param {String} [expand] 
   * @param {String} [externalId] 
   * @param {Number} [limit] 
   * @param {Number} [offset] 
   * @param {module:model/String} [order] 
   * @param {String} [sort] 
   * @param {String} [startTime] 
   * @param {module:model/String} [status] 
   * @param {module:api/CustomersApi~customersGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/DtoListCustomersResponse}
   */
  customersGet(opts, callback) {
    opts = opts || {};
    let postBody = null;
    let pathParams = {};
    let queryParams = {
      'customer_ids': this.apiClient.buildCollectionParam(opts['customerIds'], 'csv'),
      'email': opts['email'],
      'end_time': opts['endTime'],
      'expand': opts['expand'],
      'external_id': opts['externalId'],
      'limit': opts['limit'],
      'offset': opts['offset'],
      'order': opts['order'],
      'sort': opts['sort'],
      'start_time': opts['startTime'],
      'status': opts['status']
    };
    let headerParams = {};
    let formParams = {};
    let authNames = ['ApiKeyAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = DtoListCustomersResponse;
    return this.apiClient.callApi('/customers', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }

  /**
   * Callback function to receive the result of the customersIdDelete operation.
   * @callback module:api/CustomersApi~customersIdDeleteCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Delete a customer
   * Delete a customer
   * @param {String} id Customer ID
   * @param {module:api/CustomersApi~customersIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
   */
  customersIdDelete(id, callback) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling customersIdDelete");
    }
    let pathParams = {
      'id': id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['ApiKeyAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = null;
    return this.apiClient.callApi('/customers/{id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }

  /**
   * Callback function to receive the result of the customersIdEntitlementsGet operation.
   * @callback module:api/CustomersApi~customersIdEntitlementsGetCallback
   * @param {String} error Error message, if any.
   * @param {module:model/DtoCustomerEntitlementsResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get customer entitlements
   * Get customer entitlements
   * @param {String} id Customer ID
   * @param {Object} opts Optional parameters
   * @param {Array.<String>} [featureIds] 
   * @param {Array.<String>} [subscriptionIds] 
   * @param {module:api/CustomersApi~customersIdEntitlementsGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/DtoCustomerEntitlementsResponse}
   */
  customersIdEntitlementsGet(id, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling customersIdEntitlementsGet");
    }
    let pathParams = {
      'id': id
    };
    let queryParams = {
      'feature_ids': this.apiClient.buildCollectionParam(opts['featureIds'], 'csv'),
      'subscription_ids': this.apiClient.buildCollectionParam(opts['subscriptionIds'], 'csv')
    };
    let headerParams = {};
    let formParams = {};
    let authNames = ['ApiKeyAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = DtoCustomerEntitlementsResponse;
    return this.apiClient.callApi('/customers/{id}/entitlements', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }

  /**
   * Callback function to receive the result of the customersIdGet operation.
   * @callback module:api/CustomersApi~customersIdGetCallback
   * @param {String} error Error message, if any.
   * @param {module:model/DtoCustomerResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get a customer
   * Get a customer
   * @param {String} id Customer ID
   * @param {module:api/CustomersApi~customersIdGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/DtoCustomerResponse}
   */
  customersIdGet(id, callback) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling customersIdGet");
    }
    let pathParams = {
      'id': id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['ApiKeyAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = DtoCustomerResponse;
    return this.apiClient.callApi('/customers/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }

  /**
   * Callback function to receive the result of the customersIdPut operation.
   * @callback module:api/CustomersApi~customersIdPutCallback
   * @param {String} error Error message, if any.
   * @param {module:model/DtoCustomerResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Update a customer
   * Update a customer
   * @param {String} id Customer ID
   * @param {module:model/DtoUpdateCustomerRequest} customer Customer
   * @param {module:api/CustomersApi~customersIdPutCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/DtoCustomerResponse}
   */
  customersIdPut(id, customer, callback) {
    let postBody = customer;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling customersIdPut");
    }
    // verify the required parameter 'customer' is set
    if (customer === undefined || customer === null) {
      throw new Error("Missing the required parameter 'customer' when calling customersIdPut");
    }
    let pathParams = {
      'id': id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['ApiKeyAuth'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = DtoCustomerResponse;
    return this.apiClient.callApi('/customers/{id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }

  /**
   * Callback function to receive the result of the customersIdUsageGet operation.
   * @callback module:api/CustomersApi~customersIdUsageGetCallback
   * @param {String} error Error message, if any.
   * @param {module:model/DtoCustomerUsageSummaryResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get customer usage summary
   * Get customer usage summary
   * @param {String} id Customer ID
   * @param {Object} opts Optional parameters
   * @param {Array.<String>} [featureIds] 
   * @param {Array.<String>} [subscriptionIds] 
   * @param {module:api/CustomersApi~customersIdUsageGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/DtoCustomerUsageSummaryResponse}
   */
  customersIdUsageGet(id, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling customersIdUsageGet");
    }
    let pathParams = {
      'id': id
    };
    let queryParams = {
      'feature_ids': this.apiClient.buildCollectionParam(opts['featureIds'], 'csv'),
      'subscription_ids': this.apiClient.buildCollectionParam(opts['subscriptionIds'], 'csv')
    };
    let headerParams = {};
    let formParams = {};
    let authNames = ['ApiKeyAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = DtoCustomerUsageSummaryResponse;
    return this.apiClient.callApi('/customers/{id}/usage', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }

  /**
   * Callback function to receive the result of the customersLookupLookupKeyGet operation.
   * @callback module:api/CustomersApi~customersLookupLookupKeyGetCallback
   * @param {String} error Error message, if any.
   * @param {module:model/DtoCustomerResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get a customer by lookup key
   * Get a customer by lookup key (external_id)
   * @param {String} lookupKey Customer Lookup Key (external_id)
   * @param {module:api/CustomersApi~customersLookupLookupKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/DtoCustomerResponse}
   */
  customersLookupLookupKeyGet(lookupKey, callback) {
    let postBody = null;
    // verify the required parameter 'lookupKey' is set
    if (lookupKey === undefined || lookupKey === null) {
      throw new Error("Missing the required parameter 'lookupKey' when calling customersLookupLookupKeyGet");
    }
    let pathParams = {
      'lookup_key': lookupKey
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['ApiKeyAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = DtoCustomerResponse;
    return this.apiClient.callApi('/customers/lookup/{lookup_key}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }

  /**
   * Callback function to receive the result of the customersPost operation.
   * @callback module:api/CustomersApi~customersPostCallback
   * @param {String} error Error message, if any.
   * @param {module:model/DtoCustomerResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Create a customer
   * Create a customer
   * @param {module:model/DtoCreateCustomerRequest} customer Customer
   * @param {module:api/CustomersApi~customersPostCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/DtoCustomerResponse}
   */
  customersPost(customer, callback) {
    let postBody = customer;
    // verify the required parameter 'customer' is set
    if (customer === undefined || customer === null) {
      throw new Error("Missing the required parameter 'customer' when calling customersPost");
    }
    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['ApiKeyAuth'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = DtoCustomerResponse;
    return this.apiClient.callApi('/customers', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }
}