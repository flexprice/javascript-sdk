/**
 * FlexPrice API
 * FlexPrice API Service
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import DtoCreateTaskRequest from '../model/DtoCreateTaskRequest';
import DtoListTasksResponse from '../model/DtoListTasksResponse';
import DtoTaskResponse from '../model/DtoTaskResponse';
import DtoUpdateTaskStatusRequest from '../model/DtoUpdateTaskStatusRequest';
import ErrorsErrorResponse from '../model/ErrorsErrorResponse';

/**
* Tasks service.
* @module api/TasksApi
* @version 1.0
*/
export default class TasksApi {
  /**
  * Constructs a new TasksApi. 
  * @alias module:api/TasksApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the tasksGet operation.
   * @callback module:api/TasksApi~tasksGetCallback
   * @param {String} error Error message, if any.
   * @param {module:model/DtoListTasksResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * List tasks
   * List tasks with optional filtering
   * @param {Object} opts Optional parameters
   * @param {String} [createdBy] 
   * @param {String} [endTime] 
   * @param {module:model/String} [entityType] 
   * @param {String} [expand] 
   * @param {Number} [limit] 
   * @param {Number} [offset] 
   * @param {module:model/String} [order] 
   * @param {String} [sort] 
   * @param {String} [startTime] 
   * @param {module:model/String} [status] 
   * @param {module:model/String} [taskStatus] 
   * @param {module:model/String} [taskType] 
   * @param {module:api/TasksApi~tasksGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/DtoListTasksResponse}
   */
  tasksGet(opts, callback) {
    opts = opts || {};
    let postBody = null;
    let pathParams = {};
    let queryParams = {
      'created_by': opts['createdBy'],
      'end_time': opts['endTime'],
      'entity_type': opts['entityType'],
      'expand': opts['expand'],
      'limit': opts['limit'],
      'offset': opts['offset'],
      'order': opts['order'],
      'sort': opts['sort'],
      'start_time': opts['startTime'],
      'status': opts['status'],
      'task_status': opts['taskStatus'],
      'task_type': opts['taskType']
    };
    let headerParams = {};
    let formParams = {};
    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = DtoListTasksResponse;
    return this.apiClient.callApi('/tasks', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }

  /**
   * Callback function to receive the result of the tasksIdGet operation.
   * @callback module:api/TasksApi~tasksIdGetCallback
   * @param {String} error Error message, if any.
   * @param {module:model/DtoTaskResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get a task by ID
   * Get detailed information about a task
   * @param {String} id Task ID
   * @param {module:api/TasksApi~tasksIdGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/DtoTaskResponse}
   */
  tasksIdGet(id, callback) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling tasksIdGet");
    }
    let pathParams = {
      'id': id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = DtoTaskResponse;
    return this.apiClient.callApi('/tasks/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }

  /**
   * Callback function to receive the result of the tasksIdProcessPost operation.
   * @callback module:api/TasksApi~tasksIdProcessPostCallback
   * @param {String} error Error message, if any.
   * @param {Object.<String, {String: Object}>} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Process a task
   * Start processing a task
   * @param {String} id Task ID
   * @param {module:api/TasksApi~tasksIdProcessPostCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link Object.<String, {String: Object}>}
   */
  tasksIdProcessPost(id, callback) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling tasksIdProcessPost");
    }
    let pathParams = {
      'id': id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = {
      'String': Object
    };
    return this.apiClient.callApi('/tasks/{id}/process', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }

  /**
   * Callback function to receive the result of the tasksIdStatusPut operation.
   * @callback module:api/TasksApi~tasksIdStatusPutCallback
   * @param {String} error Error message, if any.
   * @param {module:model/DtoTaskResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Update task status
   * Update the status of a task
   * @param {String} id Task ID
   * @param {module:model/DtoUpdateTaskStatusRequest} status New status
   * @param {module:api/TasksApi~tasksIdStatusPutCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/DtoTaskResponse}
   */
  tasksIdStatusPut(id, status, callback) {
    let postBody = status;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling tasksIdStatusPut");
    }
    // verify the required parameter 'status' is set
    if (status === undefined || status === null) {
      throw new Error("Missing the required parameter 'status' when calling tasksIdStatusPut");
    }
    let pathParams = {
      'id': id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = [];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = DtoTaskResponse;
    return this.apiClient.callApi('/tasks/{id}/status', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }

  /**
   * Callback function to receive the result of the tasksPost operation.
   * @callback module:api/TasksApi~tasksPostCallback
   * @param {String} error Error message, if any.
   * @param {module:model/DtoTaskResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Create a new task
   * Create a new import/export task
   * @param {module:model/DtoCreateTaskRequest} task Task details
   * @param {module:api/TasksApi~tasksPostCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/DtoTaskResponse}
   */
  tasksPost(task, callback) {
    let postBody = task;
    // verify the required parameter 'task' is set
    if (task === undefined || task === null) {
      throw new Error("Missing the required parameter 'task' when calling tasksPost");
    }
    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = [];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = DtoTaskResponse;
    return this.apiClient.callApi('/tasks', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }
}