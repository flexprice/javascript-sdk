/**
 * FlexPrice API
 * FlexPrice API Service
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import DtoCreateAPIKeyRequest from '../model/DtoCreateAPIKeyRequest';
import DtoCreateAPIKeyResponse from '../model/DtoCreateAPIKeyResponse';
import DtoListSecretsResponse from '../model/DtoListSecretsResponse';
import ErrorsErrorResponse from '../model/ErrorsErrorResponse';

/**
* Secrets service.
* @module api/SecretsApi
* @version 1.0
*/
export default class SecretsApi {
  /**
  * Constructs a new SecretsApi. 
  * @alias module:api/SecretsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the secretsApiKeysGet operation.
   * @callback module:api/SecretsApi~secretsApiKeysGetCallback
   * @param {String} error Error message, if any.
   * @param {module:model/DtoListSecretsResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * List API keys
   * Get a paginated list of API keys
   * @param {Object} opts Optional parameters
   * @param {Number} [limit] Limit
   * @param {Number} [offset] Offset
   * @param {String} [status] Status (published/archived)
   * @param {module:api/SecretsApi~secretsApiKeysGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/DtoListSecretsResponse}
   */
  secretsApiKeysGet(opts, callback) {
    opts = opts || {};
    let postBody = null;
    let pathParams = {};
    let queryParams = {
      'limit': opts['limit'],
      'offset': opts['offset'],
      'status': opts['status']
    };
    let headerParams = {};
    let formParams = {};
    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = DtoListSecretsResponse;
    return this.apiClient.callApi('/secrets/api/keys', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }

  /**
   * Callback function to receive the result of the secretsApiKeysIdDelete operation.
   * @callback module:api/SecretsApi~secretsApiKeysIdDeleteCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Delete an API key
   * Delete an API key by ID
   * @param {String} id API key ID
   * @param {module:api/SecretsApi~secretsApiKeysIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
   */
  secretsApiKeysIdDelete(id, callback) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling secretsApiKeysIdDelete");
    }
    let pathParams = {
      'id': id
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = null;
    return this.apiClient.callApi('/secrets/api/keys/{id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }

  /**
   * Callback function to receive the result of the secretsApiKeysPost operation.
   * @callback module:api/SecretsApi~secretsApiKeysPostCallback
   * @param {String} error Error message, if any.
   * @param {module:model/DtoCreateAPIKeyResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Create a new API key
   * Create a new API key with the specified type and permissions
   * @param {module:model/DtoCreateAPIKeyRequest} request API key creation request
   * @param {module:api/SecretsApi~secretsApiKeysPostCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/DtoCreateAPIKeyResponse}
   */
  secretsApiKeysPost(request, callback) {
    let postBody = request;
    // verify the required parameter 'request' is set
    if (request === undefined || request === null) {
      throw new Error("Missing the required parameter 'request' when calling secretsApiKeysPost");
    }
    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = [];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = DtoCreateAPIKeyResponse;
    return this.apiClient.callApi('/secrets/api/keys', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }
}