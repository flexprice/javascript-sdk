/**
 * FlexPrice API
 * FlexPrice API Service
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import DtoBulkIngestEventRequest from '../model/DtoBulkIngestEventRequest';
import DtoGetEventsResponse from '../model/DtoGetEventsResponse';
import DtoGetUsageByMeterRequest from '../model/DtoGetUsageByMeterRequest';
import DtoGetUsageRequest from '../model/DtoGetUsageRequest';
import DtoGetUsageResponse from '../model/DtoGetUsageResponse';
import DtoIngestEventRequest from '../model/DtoIngestEventRequest';
import ErrorsErrorResponse from '../model/ErrorsErrorResponse';

/**
* Events service.
* @module api/EventsApi
* @version 1.0
*/
export default class EventsApi {
  /**
  * Constructs a new EventsApi. 
  * @alias module:api/EventsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the eventsBulkPost operation.
   * @callback module:api/EventsApi~eventsBulkPostCallback
   * @param {String} error Error message, if any.
   * @param {Object.<String, {String: String}>} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Bulk Ingest events
   * Ingest bulk events into the system
   * @param {module:model/DtoBulkIngestEventRequest} event Event data
   * @param {module:api/EventsApi~eventsBulkPostCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link Object.<String, {String: String}>}
   */
  eventsBulkPost(event, callback) {
    let postBody = event;
    // verify the required parameter 'event' is set
    if (event === undefined || event === null) {
      throw new Error("Missing the required parameter 'event' when calling eventsBulkPost");
    }
    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['ApiKeyAuth'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = {
      'String': 'String'
    };
    return this.apiClient.callApi('/events/bulk', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }

  /**
   * Callback function to receive the result of the eventsGet operation.
   * @callback module:api/EventsApi~eventsGetCallback
   * @param {String} error Error message, if any.
   * @param {module:model/DtoGetEventsResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get raw events
   * Retrieve raw events with pagination and filtering
   * @param {Object} opts Optional parameters
   * @param {String} [externalCustomerId] External Customer ID
   * @param {String} [eventName] Event Name
   * @param {String} [startTime] Start Time (RFC3339)
   * @param {String} [endTime] End Time (RFC3339)
   * @param {String} [iterFirstKey] Iter First Key (unix_timestamp_nanoseconds::event_id)
   * @param {String} [iterLastKey] Iter Last Key (unix_timestamp_nanoseconds::event_id)
   * @param {Number} [pageSize] Page Size (1-50)
   * @param {module:api/EventsApi~eventsGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/DtoGetEventsResponse}
   */
  eventsGet(opts, callback) {
    opts = opts || {};
    let postBody = null;
    let pathParams = {};
    let queryParams = {
      'external_customer_id': opts['externalCustomerId'],
      'event_name': opts['eventName'],
      'start_time': opts['startTime'],
      'end_time': opts['endTime'],
      'iter_first_key': opts['iterFirstKey'],
      'iter_last_key': opts['iterLastKey'],
      'page_size': opts['pageSize']
    };
    let headerParams = {};
    let formParams = {};
    let authNames = ['ApiKeyAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = DtoGetEventsResponse;
    return this.apiClient.callApi('/events', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }

  /**
   * Callback function to receive the result of the eventsPost operation.
   * @callback module:api/EventsApi~eventsPostCallback
   * @param {String} error Error message, if any.
   * @param {Object.<String, {String: String}>} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Ingest event
   * Ingest a new event into the system
   * @param {module:model/DtoIngestEventRequest} event Event data
   * @param {module:api/EventsApi~eventsPostCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link Object.<String, {String: String}>}
   */
  eventsPost(event, callback) {
    let postBody = event;
    // verify the required parameter 'event' is set
    if (event === undefined || event === null) {
      throw new Error("Missing the required parameter 'event' when calling eventsPost");
    }
    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['ApiKeyAuth'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = {
      'String': 'String'
    };
    return this.apiClient.callApi('/events', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }

  /**
   * Callback function to receive the result of the eventsUsageMeterPost operation.
   * @callback module:api/EventsApi~eventsUsageMeterPostCallback
   * @param {String} error Error message, if any.
   * @param {module:model/DtoGetUsageResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get usage by meter
   * Retrieve aggregated usage statistics using meter configuration
   * @param {module:model/DtoGetUsageByMeterRequest} request Request body
   * @param {module:api/EventsApi~eventsUsageMeterPostCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/DtoGetUsageResponse}
   */
  eventsUsageMeterPost(request, callback) {
    let postBody = request;
    // verify the required parameter 'request' is set
    if (request === undefined || request === null) {
      throw new Error("Missing the required parameter 'request' when calling eventsUsageMeterPost");
    }
    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['ApiKeyAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = DtoGetUsageResponse;
    return this.apiClient.callApi('/events/usage/meter', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }

  /**
   * Callback function to receive the result of the eventsUsagePost operation.
   * @callback module:api/EventsApi~eventsUsagePostCallback
   * @param {String} error Error message, if any.
   * @param {module:model/DtoGetUsageResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get usage statistics
   * Retrieve aggregated usage statistics for events
   * @param {module:model/DtoGetUsageRequest} request Request body
   * @param {module:api/EventsApi~eventsUsagePostCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/DtoGetUsageResponse}
   */
  eventsUsagePost(request, callback) {
    let postBody = request;
    // verify the required parameter 'request' is set
    if (request === undefined || request === null) {
      throw new Error("Missing the required parameter 'request' when calling eventsUsagePost");
    }
    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['ApiKeyAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = DtoGetUsageResponse;
    return this.apiClient.callApi('/events/usage', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }
}