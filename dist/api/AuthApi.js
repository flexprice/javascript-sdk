/**
 * FlexPrice API
 * FlexPrice API Service
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import DtoAuthResponse from '../model/DtoAuthResponse';
import DtoLoginRequest from '../model/DtoLoginRequest';
import DtoSignUpRequest from '../model/DtoSignUpRequest';
import ErrorsErrorResponse from '../model/ErrorsErrorResponse';

/**
* Auth service.
* @module api/AuthApi
* @version 1.0
*/
export default class AuthApi {
  /**
  * Constructs a new AuthApi. 
  * @alias module:api/AuthApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the authLoginPost operation.
   * @callback module:api/AuthApi~authLoginPostCallback
   * @param {String} error Error message, if any.
   * @param {module:model/DtoAuthResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Login
   * Login a user
   * @param {module:model/DtoLoginRequest} login Login request
   * @param {module:api/AuthApi~authLoginPostCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/DtoAuthResponse}
   */
  authLoginPost(login, callback) {
    let postBody = login;
    // verify the required parameter 'login' is set
    if (login === undefined || login === null) {
      throw new Error("Missing the required parameter 'login' when calling authLoginPost");
    }
    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = [];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = DtoAuthResponse;
    return this.apiClient.callApi('/auth/login', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }

  /**
   * Callback function to receive the result of the authSignupPost operation.
   * @callback module:api/AuthApi~authSignupPostCallback
   * @param {String} error Error message, if any.
   * @param {module:model/DtoAuthResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Sign up
   * Sign up a new user
   * @param {module:model/DtoSignUpRequest} signup Sign up request
   * @param {module:api/AuthApi~authSignupPostCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/DtoAuthResponse}
   */
  authSignupPost(signup, callback) {
    let postBody = signup;
    // verify the required parameter 'signup' is set
    if (signup === undefined || signup === null) {
      throw new Error("Missing the required parameter 'signup' when calling authSignupPost");
    }
    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = [];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = DtoAuthResponse;
    return this.apiClient.callApi('/auth/signup', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
  }
}