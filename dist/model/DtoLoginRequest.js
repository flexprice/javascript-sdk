/**
 * FlexPrice API
 * FlexPrice API Service
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DtoLoginRequest model module.
 * @module model/DtoLoginRequest
 * @version 1.0
 */
class DtoLoginRequest {
  /**
   * Constructs a new <code>DtoLoginRequest</code>.
   * @alias module:model/DtoLoginRequest
   * @param email {String} 
   * @param password {String} 
   */
  constructor(email, password) {
    DtoLoginRequest.initialize(this, email, password);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj, email, password) {
    obj['email'] = email;
    obj['password'] = password;
  }

  /**
   * Constructs a <code>DtoLoginRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DtoLoginRequest} obj Optional instance to populate.
   * @return {module:model/DtoLoginRequest} The populated <code>DtoLoginRequest</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new DtoLoginRequest();
      if (data.hasOwnProperty('email')) {
        obj['email'] = ApiClient.convertToType(data['email'], 'String');
      }
      if (data.hasOwnProperty('password')) {
        obj['password'] = ApiClient.convertToType(data['password'], 'String');
      }
      if (data.hasOwnProperty('token')) {
        obj['token'] = ApiClient.convertToType(data['token'], 'String');
      }
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>DtoLoginRequest</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DtoLoginRequest</code>.
   */
  static validateJSON(data) {
    // check to make sure all required properties are present in the JSON string
    for (const property of DtoLoginRequest.RequiredProperties) {
      if (!data.hasOwnProperty(property)) {
        throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
      }
    }
    // ensure the json data is a string
    if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
      throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
    }
    // ensure the json data is a string
    if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
      throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
    }
    // ensure the json data is a string
    if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
      throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
    }
    return true;
  }
}
DtoLoginRequest.RequiredProperties = ["email", "password"];

/**
 * @member {String} email
 */
DtoLoginRequest.prototype['email'] = undefined;

/**
 * @member {String} password
 */
DtoLoginRequest.prototype['password'] = undefined;

/**
 * @member {String} token
 */
DtoLoginRequest.prototype['token'] = undefined;
export default DtoLoginRequest;