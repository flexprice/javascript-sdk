/**
 * FlexPrice API
 * FlexPrice API Service
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DtoIngestEventRequest model module.
 * @module model/DtoIngestEventRequest
 * @version 1.0
 */
class DtoIngestEventRequest {
  /**
   * Constructs a new <code>DtoIngestEventRequest</code>.
   * @alias module:model/DtoIngestEventRequest
   * @param eventName {String} 
   * @param externalCustomerId {String} 
   */
  constructor(eventName, externalCustomerId) {
    DtoIngestEventRequest.initialize(this, eventName, externalCustomerId);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj, eventName, externalCustomerId) {
    obj['event_name'] = eventName;
    obj['external_customer_id'] = externalCustomerId;
  }

  /**
   * Constructs a <code>DtoIngestEventRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DtoIngestEventRequest} obj Optional instance to populate.
   * @return {module:model/DtoIngestEventRequest} The populated <code>DtoIngestEventRequest</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new DtoIngestEventRequest();
      if (data.hasOwnProperty('customer_id')) {
        obj['customer_id'] = ApiClient.convertToType(data['customer_id'], 'String');
      }
      if (data.hasOwnProperty('event_id')) {
        obj['event_id'] = ApiClient.convertToType(data['event_id'], 'String');
      }
      if (data.hasOwnProperty('event_name')) {
        obj['event_name'] = ApiClient.convertToType(data['event_name'], 'String');
      }
      if (data.hasOwnProperty('external_customer_id')) {
        obj['external_customer_id'] = ApiClient.convertToType(data['external_customer_id'], 'String');
      }
      if (data.hasOwnProperty('properties')) {
        obj['properties'] = ApiClient.convertToType(data['properties'], {
          'String': 'String'
        });
      }
      if (data.hasOwnProperty('source')) {
        obj['source'] = ApiClient.convertToType(data['source'], 'String');
      }
      if (data.hasOwnProperty('timestamp')) {
        obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'String');
      }
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>DtoIngestEventRequest</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DtoIngestEventRequest</code>.
   */
  static validateJSON(data) {
    // check to make sure all required properties are present in the JSON string
    for (const property of DtoIngestEventRequest.RequiredProperties) {
      if (!data.hasOwnProperty(property)) {
        throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
      }
    }
    // ensure the json data is a string
    if (data['customer_id'] && !(typeof data['customer_id'] === 'string' || data['customer_id'] instanceof String)) {
      throw new Error("Expected the field `customer_id` to be a primitive type in the JSON string but got " + data['customer_id']);
    }
    // ensure the json data is a string
    if (data['event_id'] && !(typeof data['event_id'] === 'string' || data['event_id'] instanceof String)) {
      throw new Error("Expected the field `event_id` to be a primitive type in the JSON string but got " + data['event_id']);
    }
    // ensure the json data is a string
    if (data['event_name'] && !(typeof data['event_name'] === 'string' || data['event_name'] instanceof String)) {
      throw new Error("Expected the field `event_name` to be a primitive type in the JSON string but got " + data['event_name']);
    }
    // ensure the json data is a string
    if (data['external_customer_id'] && !(typeof data['external_customer_id'] === 'string' || data['external_customer_id'] instanceof String)) {
      throw new Error("Expected the field `external_customer_id` to be a primitive type in the JSON string but got " + data['external_customer_id']);
    }
    // ensure the json data is a string
    if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
      throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
    }
    // ensure the json data is a string
    if (data['timestamp'] && !(typeof data['timestamp'] === 'string' || data['timestamp'] instanceof String)) {
      throw new Error("Expected the field `timestamp` to be a primitive type in the JSON string but got " + data['timestamp']);
    }
    return true;
  }
}
DtoIngestEventRequest.RequiredProperties = ["event_name", "external_customer_id"];

/**
 * @member {String} customer_id
 */
DtoIngestEventRequest.prototype['customer_id'] = undefined;

/**
 * @member {String} event_id
 */
DtoIngestEventRequest.prototype['event_id'] = undefined;

/**
 * @member {String} event_name
 */
DtoIngestEventRequest.prototype['event_name'] = undefined;

/**
 * @member {String} external_customer_id
 */
DtoIngestEventRequest.prototype['external_customer_id'] = undefined;

/**
 * Handled separately for dynamic columns
 * @member {Object.<String, String>} properties
 */
DtoIngestEventRequest.prototype['properties'] = undefined;

/**
 * @member {String} source
 */
DtoIngestEventRequest.prototype['source'] = undefined;

/**
 * Handled separately due to parsing
 * @member {String} timestamp
 */
DtoIngestEventRequest.prototype['timestamp'] = undefined;
export default DtoIngestEventRequest;