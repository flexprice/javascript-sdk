/**
 * FlexPrice API
 * FlexPrice API Service
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DtoMeterResponse from './DtoMeterResponse';
import TypesFeatureType from './TypesFeatureType';
import TypesStatus from './TypesStatus';

/**
 * The DtoFeatureResponse model module.
 * @module model/DtoFeatureResponse
 * @version 1.0
 */
class DtoFeatureResponse {
  /**
   * Constructs a new <code>DtoFeatureResponse</code>.
   * @alias module:model/DtoFeatureResponse
   */
  constructor() {
    DtoFeatureResponse.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>DtoFeatureResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DtoFeatureResponse} obj Optional instance to populate.
   * @return {module:model/DtoFeatureResponse} The populated <code>DtoFeatureResponse</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new DtoFeatureResponse();
      if (data.hasOwnProperty('created_at')) {
        obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
      }
      if (data.hasOwnProperty('created_by')) {
        obj['created_by'] = ApiClient.convertToType(data['created_by'], 'String');
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('environment_id')) {
        obj['environment_id'] = ApiClient.convertToType(data['environment_id'], 'String');
      }
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('lookup_key')) {
        obj['lookup_key'] = ApiClient.convertToType(data['lookup_key'], 'String');
      }
      if (data.hasOwnProperty('metadata')) {
        obj['metadata'] = ApiClient.convertToType(data['metadata'], {
          'String': 'String'
        });
      }
      if (data.hasOwnProperty('meter')) {
        obj['meter'] = DtoMeterResponse.constructFromObject(data['meter']);
      }
      if (data.hasOwnProperty('meter_id')) {
        obj['meter_id'] = ApiClient.convertToType(data['meter_id'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('status')) {
        obj['status'] = TypesStatus.constructFromObject(data['status']);
      }
      if (data.hasOwnProperty('tenant_id')) {
        obj['tenant_id'] = ApiClient.convertToType(data['tenant_id'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = TypesFeatureType.constructFromObject(data['type']);
      }
      if (data.hasOwnProperty('unit_plural')) {
        obj['unit_plural'] = ApiClient.convertToType(data['unit_plural'], 'String');
      }
      if (data.hasOwnProperty('unit_singular')) {
        obj['unit_singular'] = ApiClient.convertToType(data['unit_singular'], 'String');
      }
      if (data.hasOwnProperty('updated_at')) {
        obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
      }
      if (data.hasOwnProperty('updated_by')) {
        obj['updated_by'] = ApiClient.convertToType(data['updated_by'], 'String');
      }
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>DtoFeatureResponse</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DtoFeatureResponse</code>.
   */
  static validateJSON(data) {
    // ensure the json data is a string
    if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
      throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
    }
    // ensure the json data is a string
    if (data['created_by'] && !(typeof data['created_by'] === 'string' || data['created_by'] instanceof String)) {
      throw new Error("Expected the field `created_by` to be a primitive type in the JSON string but got " + data['created_by']);
    }
    // ensure the json data is a string
    if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
      throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
    }
    // ensure the json data is a string
    if (data['environment_id'] && !(typeof data['environment_id'] === 'string' || data['environment_id'] instanceof String)) {
      throw new Error("Expected the field `environment_id` to be a primitive type in the JSON string but got " + data['environment_id']);
    }
    // ensure the json data is a string
    if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
      throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
    }
    // ensure the json data is a string
    if (data['lookup_key'] && !(typeof data['lookup_key'] === 'string' || data['lookup_key'] instanceof String)) {
      throw new Error("Expected the field `lookup_key` to be a primitive type in the JSON string but got " + data['lookup_key']);
    }
    // validate the optional field `meter`
    if (data['meter']) {
      // data not null
      DtoMeterResponse.validateJSON(data['meter']);
    }
    // ensure the json data is a string
    if (data['meter_id'] && !(typeof data['meter_id'] === 'string' || data['meter_id'] instanceof String)) {
      throw new Error("Expected the field `meter_id` to be a primitive type in the JSON string but got " + data['meter_id']);
    }
    // ensure the json data is a string
    if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
      throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
    }
    // ensure the json data is a string
    if (data['tenant_id'] && !(typeof data['tenant_id'] === 'string' || data['tenant_id'] instanceof String)) {
      throw new Error("Expected the field `tenant_id` to be a primitive type in the JSON string but got " + data['tenant_id']);
    }
    // ensure the json data is a string
    if (data['unit_plural'] && !(typeof data['unit_plural'] === 'string' || data['unit_plural'] instanceof String)) {
      throw new Error("Expected the field `unit_plural` to be a primitive type in the JSON string but got " + data['unit_plural']);
    }
    // ensure the json data is a string
    if (data['unit_singular'] && !(typeof data['unit_singular'] === 'string' || data['unit_singular'] instanceof String)) {
      throw new Error("Expected the field `unit_singular` to be a primitive type in the JSON string but got " + data['unit_singular']);
    }
    // ensure the json data is a string
    if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
      throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
    }
    // ensure the json data is a string
    if (data['updated_by'] && !(typeof data['updated_by'] === 'string' || data['updated_by'] instanceof String)) {
      throw new Error("Expected the field `updated_by` to be a primitive type in the JSON string but got " + data['updated_by']);
    }
    return true;
  }
}

/**
 * @member {String} created_at
 */
DtoFeatureResponse.prototype['created_at'] = undefined;

/**
 * @member {String} created_by
 */
DtoFeatureResponse.prototype['created_by'] = undefined;

/**
 * @member {String} description
 */
DtoFeatureResponse.prototype['description'] = undefined;

/**
 * @member {String} environment_id
 */
DtoFeatureResponse.prototype['environment_id'] = undefined;

/**
 * @member {String} id
 */
DtoFeatureResponse.prototype['id'] = undefined;

/**
 * @member {String} lookup_key
 */
DtoFeatureResponse.prototype['lookup_key'] = undefined;

/**
 * @member {Object.<String, String>} metadata
 */
DtoFeatureResponse.prototype['metadata'] = undefined;

/**
 * @member {module:model/DtoMeterResponse} meter
 */
DtoFeatureResponse.prototype['meter'] = undefined;

/**
 * @member {String} meter_id
 */
DtoFeatureResponse.prototype['meter_id'] = undefined;

/**
 * @member {String} name
 */
DtoFeatureResponse.prototype['name'] = undefined;

/**
 * @member {module:model/TypesStatus} status
 */
DtoFeatureResponse.prototype['status'] = undefined;

/**
 * @member {String} tenant_id
 */
DtoFeatureResponse.prototype['tenant_id'] = undefined;

/**
 * @member {module:model/TypesFeatureType} type
 */
DtoFeatureResponse.prototype['type'] = undefined;

/**
 * @member {String} unit_plural
 */
DtoFeatureResponse.prototype['unit_plural'] = undefined;

/**
 * @member {String} unit_singular
 */
DtoFeatureResponse.prototype['unit_singular'] = undefined;

/**
 * @member {String} updated_at
 */
DtoFeatureResponse.prototype['updated_at'] = undefined;

/**
 * @member {String} updated_by
 */
DtoFeatureResponse.prototype['updated_by'] = undefined;
export default DtoFeatureResponse;