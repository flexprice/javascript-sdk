/**
 * FlexPrice API
 * FlexPrice API Service
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DtoUsageAnalyticPoint from './DtoUsageAnalyticPoint';
import TypesAggregationType from './TypesAggregationType';

/**
 * The DtoUsageAnalyticItem model module.
 * @module model/DtoUsageAnalyticItem
 * @version 1.0
 */
class DtoUsageAnalyticItem {
  /**
   * Constructs a new <code>DtoUsageAnalyticItem</code>.
   * @alias module:model/DtoUsageAnalyticItem
   */
  constructor() {
    DtoUsageAnalyticItem.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>DtoUsageAnalyticItem</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DtoUsageAnalyticItem} obj Optional instance to populate.
   * @return {module:model/DtoUsageAnalyticItem} The populated <code>DtoUsageAnalyticItem</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new DtoUsageAnalyticItem();
      if (data.hasOwnProperty('aggregation_type')) {
        obj['aggregation_type'] = TypesAggregationType.constructFromObject(data['aggregation_type']);
      }
      if (data.hasOwnProperty('currency')) {
        obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
      }
      if (data.hasOwnProperty('event_name')) {
        obj['event_name'] = ApiClient.convertToType(data['event_name'], 'String');
      }
      if (data.hasOwnProperty('feature_id')) {
        obj['feature_id'] = ApiClient.convertToType(data['feature_id'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('points')) {
        obj['points'] = ApiClient.convertToType(data['points'], [DtoUsageAnalyticPoint]);
      }
      if (data.hasOwnProperty('source')) {
        obj['source'] = ApiClient.convertToType(data['source'], 'String');
      }
      if (data.hasOwnProperty('total_cost')) {
        obj['total_cost'] = ApiClient.convertToType(data['total_cost'], 'Number');
      }
      if (data.hasOwnProperty('total_usage')) {
        obj['total_usage'] = ApiClient.convertToType(data['total_usage'], 'Number');
      }
      if (data.hasOwnProperty('unit')) {
        obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
      }
      if (data.hasOwnProperty('unit_plural')) {
        obj['unit_plural'] = ApiClient.convertToType(data['unit_plural'], 'String');
      }
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>DtoUsageAnalyticItem</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DtoUsageAnalyticItem</code>.
   */
  static validateJSON(data) {
    // ensure the json data is a string
    if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
      throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
    }
    // ensure the json data is a string
    if (data['event_name'] && !(typeof data['event_name'] === 'string' || data['event_name'] instanceof String)) {
      throw new Error("Expected the field `event_name` to be a primitive type in the JSON string but got " + data['event_name']);
    }
    // ensure the json data is a string
    if (data['feature_id'] && !(typeof data['feature_id'] === 'string' || data['feature_id'] instanceof String)) {
      throw new Error("Expected the field `feature_id` to be a primitive type in the JSON string but got " + data['feature_id']);
    }
    // ensure the json data is a string
    if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
      throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
    }
    if (data['points']) {
      // data not null
      // ensure the json data is an array
      if (!Array.isArray(data['points'])) {
        throw new Error("Expected the field `points` to be an array in the JSON data but got " + data['points']);
      }
      // validate the optional field `points` (array)
      for (const item of data['points']) {
        DtoUsageAnalyticPoint.validateJSON(item);
      }
      ;
    }
    // ensure the json data is a string
    if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
      throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
    }
    // ensure the json data is a string
    if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
      throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
    }
    // ensure the json data is a string
    if (data['unit_plural'] && !(typeof data['unit_plural'] === 'string' || data['unit_plural'] instanceof String)) {
      throw new Error("Expected the field `unit_plural` to be a primitive type in the JSON string but got " + data['unit_plural']);
    }
    return true;
  }
}

/**
 * @member {module:model/TypesAggregationType} aggregation_type
 */
DtoUsageAnalyticItem.prototype['aggregation_type'] = undefined;

/**
 * @member {String} currency
 */
DtoUsageAnalyticItem.prototype['currency'] = undefined;

/**
 * @member {String} event_name
 */
DtoUsageAnalyticItem.prototype['event_name'] = undefined;

/**
 * @member {String} feature_id
 */
DtoUsageAnalyticItem.prototype['feature_id'] = undefined;

/**
 * @member {String} name
 */
DtoUsageAnalyticItem.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/DtoUsageAnalyticPoint>} points
 */
DtoUsageAnalyticItem.prototype['points'] = undefined;

/**
 * @member {String} source
 */
DtoUsageAnalyticItem.prototype['source'] = undefined;

/**
 * @member {Number} total_cost
 */
DtoUsageAnalyticItem.prototype['total_cost'] = undefined;

/**
 * @member {Number} total_usage
 */
DtoUsageAnalyticItem.prototype['total_usage'] = undefined;

/**
 * @member {String} unit
 */
DtoUsageAnalyticItem.prototype['unit'] = undefined;

/**
 * @member {String} unit_plural
 */
DtoUsageAnalyticItem.prototype['unit_plural'] = undefined;
export default DtoUsageAnalyticItem;