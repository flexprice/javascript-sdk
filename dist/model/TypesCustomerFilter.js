/**
 * FlexPrice API
 * FlexPrice API Service
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TypesFilterCondition from './TypesFilterCondition';
import TypesSortCondition from './TypesSortCondition';
import TypesStatus from './TypesStatus';

/**
 * The TypesCustomerFilter model module.
 * @module model/TypesCustomerFilter
 * @version 1.0
 */
class TypesCustomerFilter {
  /**
   * Constructs a new <code>TypesCustomerFilter</code>.
   * @alias module:model/TypesCustomerFilter
   */
  constructor() {
    TypesCustomerFilter.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>TypesCustomerFilter</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TypesCustomerFilter} obj Optional instance to populate.
   * @return {module:model/TypesCustomerFilter} The populated <code>TypesCustomerFilter</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new TypesCustomerFilter();
      if (data.hasOwnProperty('customer_ids')) {
        obj['customer_ids'] = ApiClient.convertToType(data['customer_ids'], ['String']);
      }
      if (data.hasOwnProperty('email')) {
        obj['email'] = ApiClient.convertToType(data['email'], 'String');
      }
      if (data.hasOwnProperty('end_time')) {
        obj['end_time'] = ApiClient.convertToType(data['end_time'], 'String');
      }
      if (data.hasOwnProperty('expand')) {
        obj['expand'] = ApiClient.convertToType(data['expand'], 'String');
      }
      if (data.hasOwnProperty('external_id')) {
        obj['external_id'] = ApiClient.convertToType(data['external_id'], 'String');
      }
      if (data.hasOwnProperty('filters')) {
        obj['filters'] = ApiClient.convertToType(data['filters'], [TypesFilterCondition]);
      }
      if (data.hasOwnProperty('limit')) {
        obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
      }
      if (data.hasOwnProperty('offset')) {
        obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
      }
      if (data.hasOwnProperty('order')) {
        obj['order'] = ApiClient.convertToType(data['order'], 'String');
      }
      if (data.hasOwnProperty('sort')) {
        obj['sort'] = ApiClient.convertToType(data['sort'], [TypesSortCondition]);
      }
      if (data.hasOwnProperty('start_time')) {
        obj['start_time'] = ApiClient.convertToType(data['start_time'], 'String');
      }
      if (data.hasOwnProperty('status')) {
        obj['status'] = TypesStatus.constructFromObject(data['status']);
      }
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>TypesCustomerFilter</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TypesCustomerFilter</code>.
   */
  static validateJSON(data) {
    // ensure the json data is an array
    if (!Array.isArray(data['customer_ids'])) {
      throw new Error("Expected the field `customer_ids` to be an array in the JSON data but got " + data['customer_ids']);
    }
    // ensure the json data is a string
    if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
      throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
    }
    // ensure the json data is a string
    if (data['end_time'] && !(typeof data['end_time'] === 'string' || data['end_time'] instanceof String)) {
      throw new Error("Expected the field `end_time` to be a primitive type in the JSON string but got " + data['end_time']);
    }
    // ensure the json data is a string
    if (data['expand'] && !(typeof data['expand'] === 'string' || data['expand'] instanceof String)) {
      throw new Error("Expected the field `expand` to be a primitive type in the JSON string but got " + data['expand']);
    }
    // ensure the json data is a string
    if (data['external_id'] && !(typeof data['external_id'] === 'string' || data['external_id'] instanceof String)) {
      throw new Error("Expected the field `external_id` to be a primitive type in the JSON string but got " + data['external_id']);
    }
    if (data['filters']) {
      // data not null
      // ensure the json data is an array
      if (!Array.isArray(data['filters'])) {
        throw new Error("Expected the field `filters` to be an array in the JSON data but got " + data['filters']);
      }
      // validate the optional field `filters` (array)
      for (const item of data['filters']) {
        TypesFilterCondition.validateJSON(item);
      }
      ;
    }
    // ensure the json data is a string
    if (data['order'] && !(typeof data['order'] === 'string' || data['order'] instanceof String)) {
      throw new Error("Expected the field `order` to be a primitive type in the JSON string but got " + data['order']);
    }
    if (data['sort']) {
      // data not null
      // ensure the json data is an array
      if (!Array.isArray(data['sort'])) {
        throw new Error("Expected the field `sort` to be an array in the JSON data but got " + data['sort']);
      }
      // validate the optional field `sort` (array)
      for (const item of data['sort']) {
        TypesSortCondition.validateJSON(item);
      }
      ;
    }
    // ensure the json data is a string
    if (data['start_time'] && !(typeof data['start_time'] === 'string' || data['start_time'] instanceof String)) {
      throw new Error("Expected the field `start_time` to be a primitive type in the JSON string but got " + data['start_time']);
    }
    return true;
  }
}

/**
 * @member {Array.<String>} customer_ids
 */
TypesCustomerFilter.prototype['customer_ids'] = undefined;

/**
 * @member {String} email
 */
TypesCustomerFilter.prototype['email'] = undefined;

/**
 * @member {String} end_time
 */
TypesCustomerFilter.prototype['end_time'] = undefined;

/**
 * @member {String} expand
 */
TypesCustomerFilter.prototype['expand'] = undefined;

/**
 * @member {String} external_id
 */
TypesCustomerFilter.prototype['external_id'] = undefined;

/**
 * filters allows complex filtering based on multiple fields
 * @member {Array.<module:model/TypesFilterCondition>} filters
 */
TypesCustomerFilter.prototype['filters'] = undefined;

/**
 * @member {Number} limit
 */
TypesCustomerFilter.prototype['limit'] = undefined;

/**
 * @member {Number} offset
 */
TypesCustomerFilter.prototype['offset'] = undefined;

/**
 * @member {module:model/TypesCustomerFilter.OrderEnum} order
 */
TypesCustomerFilter.prototype['order'] = undefined;

/**
 * @member {Array.<module:model/TypesSortCondition>} sort
 */
TypesCustomerFilter.prototype['sort'] = undefined;

/**
 * @member {String} start_time
 */
TypesCustomerFilter.prototype['start_time'] = undefined;

/**
 * @member {module:model/TypesStatus} status
 */
TypesCustomerFilter.prototype['status'] = undefined;

/**
 * Allowed values for the <code>order</code> property.
 * @enum {String}
 * @readonly
 */
TypesCustomerFilter['OrderEnum'] = {
  /**
   * value: "asc"
   * @const
   */
  "asc": "asc",
  /**
   * value: "desc"
   * @const
   */
  "desc": "desc"
};
export default TypesCustomerFilter;